=encoding utf8

=head1 Имя

perl5200delta - что нового в perl v5.20.0

=head1 Описание

Этот документ описывает изменения между релизом 5.18.0 и 5.20.0.

Если вы обновляетесь с более раннего релиза, как например, 5.16.0, сначала
прочтите L<perl5180delta>, который описывает отличия между 5.16.0 и 5.18.0.

=head1 Базовые улучшения

=head2 Экспериментальные сигнатуры функции

Декларативный синтаксис для разворачивания списка в лексические переменные.
C<sub foo ($a,$b) {...}> проверяет число аргументов и помещает аргументы в
лексические переменные. Сигнатуры не являются эквивалентом существующей идиоме
C<sub foo { my($a,$b) = @_; ... }>. Сигнатуры доступны только при включении не
используемой по умолчанию возможности и генерируют предупреждения о своей
экспериментальности. Синтаксический конфликт с прототипами решён за счёт
отключения короткой формы записи прототипа, когда сигнатуры включены.

Смотрите детали в L<perlsub/Signatures>.

=head2 C<sub> теперь может иметь атрибут C<prototype>

При объявлении или создании C<sub> прототип теперь может быть указан внутри
атрибута C<prototype> вместо записи его в скобках после имени.

Например, C<sub foo($$){}> может быть записано как
C<sub foo : prototype($$){}>.

=head2 Более последовательный разбор прототипа

Раньше позволялось использовать несколько символов точки с запятой в прототипах
подпрограмм и они рассматривались как одна точка с запятой. Но был один случай,
в котором этого не происходило. Подпрограммы, чьи прототипы начинались с "*"
или ";*" могли влиять на то, рассматривается ли простое слово именем метода или
вызовом подпрограммы. Теперь тоже самое относится и к ";;;*".

Пробельные символы долгое время были разрешены внутри прототипов подпрограмм,
таким образом C<sub( $ $ )> было эквивалентно C<sub($$)>, но до текущего
времени они удалялись при лексическом разборе. Поэтому пробельные символы I<не>
были разрешены в прототипах задаваемых с помощью
C<Scalar::Util::set_prototype>. Теперь они разрешены и парсер больше не удаляет
пробельные символы. Это означает, что C<prototype &mysub> возвращает
оригинальный прототип с пробелами и всем остальным.

=head2 C<rand> теперь использует согласованный генератор случайных чисел

Ранее perl использовал специфичный для каждой платформы генератор случайных
чисел, варьируясь между libc rand(), random() или drand48().

Это означало, что качество генератора случайных чисел менялось от платформы к
платформе, начиная с 15-битного rand() на Windows до 48-битного на POSIX
платформах, таких как Linux с drand48().

Perl теперь использует свой собственную внутреннюю реализацию drand48() на всех
платформах. Но это не делает C<rand> перла криптографически безопасным.
[perl #115928]

=head2 Новый синтаксис среза

Новый синтаксис C<%hash{...}> и C<%array[...]> возвращает список пар
ключей/значений (или индексов/значений). Смотрите
L<perldata/"Key/Value Hash Slices">.

=head2 Экспериментальное постфиксное разыменование

Когда включена возможность C<postderef>, устанавливаются следующие
синтаксические эквивалентности:

  $sref->$*;  # то же, что и ${ $sref }  # интерполяция
  $aref->@*;  # то же, что и @{ $aref }  # интерполяция
  $href->%*;  # то же, что и %{ $href }
  $cref->&*;  # то же, что и &{ $cref }
  $gref->**;  # то же, что и *{ $gref }

  $aref->$#*; # то же что и $#{ $aref }

  $gref->*{ $slot }; # то же, что и *{ $gref }{ $slot }

  $aref->@[ ... ];  # то же, что и @$aref[ ... ]  # интерполяция
  $href->@{ ... };  # то же, что и @$href{ ... }  # интерполяция
  $aref->%[ ... ];  # то же, что и %$aref[ ... ]
  $href->%{ ... };  # то же, что и %$href{ ... }

Те, что отмечены, как интерполяция, интерполируют только при включении
возможности C<postderef_qq>. Эта возможность является B<экспериментальной> и
приводит к выводу предупреждений категории C<experimental::postderef> при
использовании, если только их вывод не подавлен.

Для большей информации, смотрите в L<the Postfix Dereference Syntax section of
perlref|perlref/Postfix Dereference Syntax>.

=head2 Теперь поддерживается Юникод 6.3

Perl теперь поддерживает и поставляется с Юникодом 6.3 (хотя Perl может быть
компилирован с поддержкой любого предыдущего релиза Юникода). Детальный список
изменений в Юникоде 6.3 доступен в
L<http://www.unicode.org/versions/Unicode6.3.0/>.

=head2 Новое свойство шаблонов регулярных выражений C<\p{Unicode}>

Это синоним для C<\p{Any}> и совпадает с набором определённых в Юникоде кодов
символом 0 - 0x10FFFF.

=head2 Более лучшая поддержка 64-битных платформ

На 64-битных платформах, внутренние функции массивов теперь используют
64-битные отступы, позволяя массивам Perl содержать больше 2**31 элементов,
если у вас доступен такой объём памяти.

Движок регулярных выражений теперь поддерживает строки длиннее чем 2**31
символов. [perl #112790, #116907]

Функции PerlIO_get_bufsiz, PerlIO_get_cnt, PerlIO_set_cnt и PerlIO_set_ptrcnt
теперь имеют тип SSize_t вместо int у возвращаемых значений и параметров.

=head2 C<S<use locale>> теперь работает на UTF-8 локалях

До этого выпуска поддерживались только однобайтные локали, такие как серия
ISO 8859. Теперь всё более и более типичные мультибайтные UTF-8 локали также
поддерживаются. UTF-8 локаль -- это такая локаль, которая имеет набор символов
Юникод и кодировку UTF-8. POSIX-категория операций C<LC_CTYPE> (изменение
регистра (как C<lc()>, C<"\U">) и классификация символов (C<\w>, C<\D>,
C<qr/[[:punct:]]/>)) под такой локалью работает как если бы была включена
возможность C<S<use feature 'unicode_strings'>>, за тем исключением если
выполняются правила taint. Сортировка остаётся в порядке возрастания кода
символа в этом релизе. [perl #56820].

=head2 C<S<use locale>> теперь компилируется на системах без поддержки локалей

Ранее подобное выражение приводило к невозможности компиляции. В пределах
действия прагмы программа ведёт себя как была установлена локаль "C". Таким
образом программы, написанные с поддержкой локалей, могут быть запущены на
платформах без поддержки локалей без изменений в коде. Попытка поменять
значение локали на отличное от "C" разумеется будет безуспешной.

=head2 Больше запасных вариантов для инициализации локали

Если происходила ошибка с локалями при запуске Perl, то он сразу сдавался и
пытался использовать локаль C<"C">. Теперь он сначала пытается использовать
другие локали, предоставленные переменными окружения, как описано в
L<perllocale/ENVIRONMENT>. Например, если обе C<LC_ALL> и C<LANG> установлены,
и использовать локаль из C<LC_ALL> не удалось, Perl теперь попытается
использовать локаль из C<LANG>, и если эта попытка тоже будет безуспешной, он
попытается откатиться на C<"C">. На Windows машинах, Perl перед использованием
C<"C">, попытается использовать системную локаль по умолчанию, если все локали
из переменных окружения не заработали.

=head2 Опция запуска C<-DL> была добавлена для отслеживания установок локали

Она предназначена для помощи разработчикам базового Perl в отладке ошибок,
связанных с локалью.

=head2 B<-F> теперь полразумевает B<-a>, а B<-a> подразумевает B<-n>

Раньше B<-F> без B<-a> не давала никакого эффекта, также как и B<-a> без B<-n>
или B<-p>. С этим изменением если вы указываете B<-F>, то обе B<-a> и B<-n>
подразумеваются, а если вы указываете B<-a>, то подразумевается B<-n>.

Вы по-прежнему можете указывать B<-p> для его дополнительного действия. [perl
#116190]

=head2 удаление предупреждения для $a и $b

Специальные переменные $a и $b, используемые в C<sort>, теперь не приводят к
предупреждениям "used once" (использованы один раз), даже если они использованы
вне C<sort>. Это позволит CPAN модулям предоставлять функции, использующие $a и
$b для подобных же целей. [perl #120462]

=head1 Безопасность

=head2 Избежание возможного чтения освобождённой памяти при синтаксическом
разборе

Раньше существовала возможность, что освобождённая память могла быть прочитана
при синтаксическом разборе в необычных случаях, когда Perl программа
заканчивалась встроенной документацией и последняя строка файла на диске не
имела завершающего символа переноса строки. Это теперь исправлено.

=head1 Несовместимые изменения

=head2 C<do> больше нельзя использовать для вызова подпрограммы

Форма вызова C<do SUBROUTINE(LIST)> выводила предупреждение об устаревшей
конструкции, начиная с Perl v5.0.0 и теперь это синтаксическая ошибка.

=head2 Изменения в экранировании в выражениях в кавычках

Символ после C<\c> в строках с двойными кавычками ("..." или qq(...)) или в
регулярных выражениях теперь должен быть печатным символом и не может быть
C<{>.

Литера C<{> после C<\B> или C<\b> теперь фатальная ошибка.

Это являлось устаревшей конструкцией в perl v5.14.0.

=head2 "Заражение" теперь происходит в большем числе случаев; теперь
соответствует документации

Это затрагивает регулярные выражения совпадающие и меняющие регистр строк
(C<lc>, C<"\U">, I<etc>.) внутри области действия C<use locale>. Результат
теперь "заражён" (tainted) в соответствии с операцией независимо от содержимого
там, где документация (L<perlsec>, L<perllocale/SECURITY>) указывает, что он
должен. Раньше для операций изменения регистра, если строка содержала символы,
чей регистр зависит от локали, результирующая строка не была "заражена".
Например, результат C<uc()> на пустой строке или содержащей только коды
символов вне пределов Latin1 теперь "заражён", чего не было раньше. Это ведёт к
более согласованным результатам "заражения". Шаблоны регулярных выражений
"заражают" свой небинарный результат (как C<$&>, C<$2>) тогда и только тогда,
когда шаблон содержит элементы, чьё совпадение зависит от текущей (возможно
"заражённой") локали. Также как и изменяющий регистр функции актуальное
содержимое, в котором ищется совпадение теперь, не имеет значение, в то время
как раньше имело. Например, если шаблон содержит C<\w>, результат будет
"заражён", даже если поиск совпадения не использовал эту порцию шаблона для
успешного или неуспешного поиска, поскольку совпадение C<\w> зависит от локали.
Однако, например, C<.> в шаблонах не будет включать "заражение", поскольку
точка совпадает любым одиночным символом и текущая локаль никак не может
поменять результат поиска совпадения.

=head2 Поиск совпадений C<\p{}>, C<\P{}> изменился для не Юникодовых кодов
символов.

C<\p{}> и C<\P{}> определены в Юникоде только для определённых в Юникоде кодов
символов (от C<U+0000> до C<U+10FFFF>). Их поведение при поиске совпадений для
легальных Юникод кодов символов не изменилось, но есть изменения для кодовых
точек от C<0x110000> и выше. Ранее Perl рассматривал результат совпадения с
C<\p{}> и C<\P{}> с такими символами как C<undef>, который интерпретировался
как "ложь". Для C<\P{}> это позже устанавливалось в "истину". Также
предполагалось, что будет выдаваться предупреждение для таких случаев. Однако,
различные оптимизации могли предотвращать появление предупреждения и часто
приводили к нелогичным результатам как для поиска совпадения, так и кажущейся
ложности обратного условия. Теперь все не Юникод коды символов рассматриваются
как типичные коды символов, которые ещё не получили своё определение в
Юникоде. Это в целом больше соответствует духу "делай то, что я имел ввиду".
Предупреждение выводится только если результат может отличаться от строго
следования стандарту Юникод. Код, который должен строго следовать стандарту
Юникод может сделать это предупреждение фатальным и в таком случае Perl всегда
будет выводить предупреждение.

Детали в L<perlunicode/Beyond Unicode code points>.

=head2 C<\p{All}> был расширен для совпадения со всеми возможными кодами
символов

Определённый в Perl элемент шаблона регулярного выражения C<\p{All}>,
неиспользуемый на CPAN, раньше совпадал только с кодами символов Юникода,
теперь он совпадает со всеми возможными кодами символов, таким образом он
эквивалентен C<qr/./s>. Следовательно C<\p{All}> больше не является синонимом
C<\p{Any}>, который продолжает совпадать только с кодами символов Юникод, как
и предписывает стандарт Юникод.

=head2 Вывод Data::Dumper может измениться

В зависимости от выводимой структуры данных и настройках Data::Dumper, вывод
может отличаться от предыдущих версий.

Если у вас есть тесты, которые зависят от точного вывода Data::Dumper, то они
могут упасть.

Чтобы избежать подобной проблемы в вашем коде, тестируйте структуру на
совпадение с помощью вычисленного в eval дампа структуры, вместо самого дампа.

=head2 Символ десятичной запятой текущей локали больше не просачивается за
пределы области видимости S<C<use locale>>

На самом деле это исправление бага, но есть код, который зависит от присутствия
этого бага, поэтому это изменение указано здесь. Текущая локаль, под которой
запущена программа, не должны быть видна для Perl кода за исключением области
видимости S<C<use locale>>. Однако, до текущего момента при некоторых условиях
символ, который используется для десятичной запятой (часто это запятая),
просачивался вне этой области видимости. Если ваш код затронут этим изменением,
просто добавьте S<C<use locale>>.

=head2 Присвоение кодов ошибки переменной C<$!> для сокетов на Windows теперь
отдаёт приоритет значениям F<errno.h> над значениями WSAGetLastError()

В предыдущих версиях Perl, коды ошибок для Windows сокетов, возвращаемые
WSAGetLastError(), присваивались C<$!>, и некоторые константы, такие ка
ECONNABORTED, отсутствующие в F<errno.h> в VC++ (или различных Windows портах
gcc) были определены в соответствующие WSAE* значения, чтобы иметь возможность
протестировать C<$!> на соответствие константам E*, экспортируемые L<Errno> и
L<POSIX>.

Это работало пока в VC++ 2010 и более поздних, которые представили новые E*
константы со значениями E<gt> 100 в F<errno.h>, включая некоторые значения,
которые были переопределены в perl к WSAE* значения. Это привело к проблемам
при линковке XS кода с библиотеками, которые используют оригинальные
определения констант из F<errno.h>.

Чтобы избежать поломки существующего Perl кода, который присваивает WSAE*
значения в C<$!>, perl теперь перехватывает присвоение и производит такое же
соответствие E* значениям, какие использует внутри при присвоении самой C<$!>.

Однако, одна обратная несовместимость остаётся: существующий Perl код, который
сравнивает C<$!> с числовым значением кода ошибки WSAE*, которые раньше были
присвоены в C<$!>, теперь окажется сломанным в тех случаях, когда
соответствующее E* значение было присвоено вместо него. Это становится
проблемой для E* значений E<lt> 100, которые всегда экспортировались из
L<Errno> и L<POSIX> с их оригинальными F<errno.h> значениями, и поэтому не
могли быть использованы для тестов кодов ошибок WSAE* (например, WSAEINVAL
равен 10022, но соответствующее EINVAL равно 22). (E* значения E<gt> 100, при
наличии, всё равно переопределяются в WSAE* значения, поэтому совместимость
может быть достигнута при использовании E* констант, которые работали как до,
так и после этого изменения, хотя и используя уже другие численные значения под
капотом.)

=head2 Функции C<PerlIO_vsprintf> и C<PerlIO_sprintf> были удалены

Эти две функции, недокументированные, неиспользуемые на CPAN и имеющие
проблемы, были удалены.

=head1 Устаревшие конструкции

=head2 Класс символов C</\C/>

Класс символов C</\C/> в регулярных выражениях устарел. Начиная с perl 5.22 это
будет выдавать предупреждение, а с perl 5.24 - станет ошибкой при компиляции
регулярного выражения. Если вам требуется проверить отдельные байты, которые
составляют UTF-8 символ, тогда используйте предварительно C<utf8::encode()> на
строке (или копии).

=head2 Управляющие символы в именах переменных

Устаревшими становятся вещи наподобие $\cT, где \cT -- это управляющий
контрольный символ (такой как C<NAK> или C<NEGATIVE ACKNOWLEDGE>) в исходном
коде. Удивительно, но оказывается, что изначально это использовалось как
канонический способ доступа к таким переменным как $^T, со знаком вставки
добавленным только как альтернатива.

Форма управляющих символов становится устаревшей по двум основным причинам. Это
невозможность исправления багов, таких как $\cI не работающий как алиас для $^I,
и их использование не переносимо на не-ASCII платформы: в то время как $^T
будет работать везде, \cT является пробелом в EBCDIC. [perl #119123]

=head2 Ссылка на нецелые или отрицательные целые в C<$/>

Присвоение C<$/> ссылки на ноль или ссылки на отрицательное целое теперь
считается устаревшим, и будет вести себя B<в точности> как присвоение ей
значения C<undef>. Если вам нужно slurp поведение устанавливайте C<$/> в
C<undef> явно.

Присвоение C<$/> ссылки на нецелочисленное значение теперь запрещено и будет
приводить к ошибке. Perl никогда не документировал что будет происходить в
данном контексте и поскольку раньше это соответствовало установке C<$/> в адрес
ссылки, а в будущем это может начать вести себя по-другому, мы установили
запрет на подобное использование.

=head2 Фцнкции поиска совпадения символов в POSIX

Использование следующих функций в C<POSIX> модуле теперь считается устаревшим:
C<isalnum>, C<isalpha>, C<iscntrl>, C<isdigit>, C<isgraph>, C<islower>,
C<isprint>, C<ispunct>, C<isspace>, C<isupper> и C<isxdigit>. Функции кишат
багами и не работают с UTF-8 кодированными строками. Смотрите их описание в
L<POSIX> для более подробной информации.

Будет выводиться предупреждение при первом вызове любой из них из любого места
кода, в котором они вызываются. (Следовательно повторная инструкция в цикле
будет выводить только одно предупреждение).

=head2 Треды на базе интерпретатора теперь I<не рекомендуются>

"Треды на базе интерпретатора", предоставляемые Perl не являются быстрой,
легковесной системой для многозадачности как многие ожидают и надеются. Треды
реализованы так, что очень легко их использовать неправильно. Немногие знают
как использовать их правильно или способны помочь другим.

Использование тредов на базе интерпретатора в perl официально
L<не рекомендуется|perlpolicy/discouraged>.

=head2 Удаление модулей

Следующие модули будут удалены из базового дистрибутива в будущем релизе и
должны будут устанавливаться со CPAN. Дистрибутивы на CPAN, которым требуются
эти модули должны указать их в своих списках зависимостей.

Версии модулей из базового дистрибутива теперь будут выдавать предупреждения
категории C<"устаревшие">, извещая вам об этом факте. Для подавления этих
предупреждений установите эти модули со CPAN.

Обратите внимание, что запланированное удаление этих модулей из ядра не
отражает суждение о качестве их кода и не намекает на остановку их разработки.
Их удаление из ядра связано с необходимостью в бутстрапе для получения
полнофункциональной CPAN-совместимой инсталляции Perl, и не касается их
дизайна.

=over

=item L<CGI> и связанные CGI:: пакеты

=item L<inc::latest>

=item L<Package::Constants>

=item L<Module::Build> и связанные Module::Build:: пакеты

=back

=head2 Удаление утилит

Следующие утилиты будут удалены из базового дистрибутива в будущем релизе и
должны будут устанавливаться со CPAN.

=over 4

=item L<find2perl>

=item L<s2p>

=item L<a2p>

=back

=head1 Улучшения в производительности

=over 4

=item *

Perl имеет новый механизм копирования-при-записи, который избегает
необходимости копирования внутреннего буфера строки при присвоении одного
скаляра другому. Это значительно ускорит наблюдаемый процесс копирования
больших строк. Изменение одной из двух (или большего числа) строк после
присвоения приведёт к вынужденному внутреннему копированию. Что делает ненужным
передачу строк по ссылке для эффективности.

Данная возможность уже присутствовала в 5.18.0, но она не была включена по
умолчанию. Теперь она доступна по умолчанию, поэтому вам больше не требуется
собирать perl с аргументом F<Configure>:

    -Accflags=-DPERL_NEW_COPY_ON_WRITE

Но может быть отключена (теперь) при сборке perl с:

    -Accflags=-DPERL_NO_COW

На некоторых операционных системах Perl может быть собран так, что любая
попытка модификации буфер строки разделённого с разными SV приведёт к краху.
Таким образом авторы XS модулей могут проверить, что их модули могут работать с
копируемых-при-записи скаляров корректно. Смотрите подробности в
L<perlguts/"Copy on Write">.

=item *

Perl имеет оптимизатор для шаблонов регулярных выражений. Он анализирует
шаблоны для поиска такие вещи как минимальная длина строки для совпадения и
т.д. Теперь он лучше поддерживает коды символов за пределами диапазона Latin1.

=item *

Выполняя регулярное выражение, которое содержит якорь C<^> (или его вариации
при наличии флага C</m>), теперь работает значительно быстрее в некоторых
ситуациях.

=item *

Заранее вычисленные значения хеша теперь используются в больших местах при
поиске метода.

=item *

Поиск по ключу-константе хеша (C<$hash{key}> в отличии от C<$hash{$key}>) давно
использует заранее вычисленное внутреннее значение хеша, чтобы ускорить поиск.
Подобная оптимизация теперь применена и к срезам хеша.

=item *

Комбинированные операторы C<and> и C<or> в пустом контексте, как например,
в C<< unless ($a && $b) >> и C<< if ($a || $b) >>, теперь сразу переходят к
концу выражения. [perl #120128]

=item *

В тех ситуациях, когда C<return> это последний оператор в основной области
видимости подпрограммы, он оптимизируется. Это значить, что код вида:

  sub baz { return $cat; }

будет вести себя как:

  sub baz { $cat; }

что заметно быстрее.

[perl #120765]

=item *

Код вида:

  my $x; # or @x, %x
  my $y;

теперь оптимизируется к:

  my ($x, $y);

В комбинации с L<оптимизацией padrange появившейся в
v5.18.0|perl5180delta/Internal Changes>, это означает, что и более длинный
список неинициализированных переменных оптимизируется:

  my $x; my @y; my %z;

становится:

  my ($x, @y, %z);

[perl #121077]

=item *

Создание некоторых видов списков, включая массивы или срезы хешей теперь
выполняется быстрее.

=item *

Оптимизация для массивов адресуемых небольшими постоянными целыми числами
теперь применяется для целых в диапазоне -128..127, а не 0..255. Это должно
ускорить Perl код, который использует выражения вида C<$x[-1]>, в ущерб
(значительно более редко используемому) коду, использующий выражения C<$x[200]>.

=item *

Первая итерация над длинным хешем (используя C<keys> or C<each>) теперь
выполняется быстрее. Это достигнуто за счёт предварительного выделения
состояния внутреннего итератора хеша, вместо его ленивого создания, когда он
обходится в первый раз. (Для маленьких хешей итератор по-прежнему создаётся при
первой необходимости. Предполагается, что маленькие хеши используются для
объектов и потому никогда не создаются. Для больших хешей, это более вероятно,
и цена создания итератора поглощается стоимостью выделения места под сам хеш.)

=item *

При выполнении глобального поиска совпадений в регулярном выражении в строке,
которая приходит от C<readline> или оператора C<E<lt>E<gt>>, данные больше
бесполезно не копируются. [perl #121259]

=item *

Разыменование (как в C<$obj-E<gt>[0]> или C<$obj-E<gt>{k}>) теперь происходит
быстрее, когда C<$obj> является экземпляром класса, который имеет перегруженные
методы, но не перегружает ни одного из методов разыменования C<@{}>, C<%{}> и
подобных.

=item *

Оптимизатор Perl больше не пропускает оптимизацию кода, который следует за
некоторыми C<eval {}> выражениями (включая те, которые похожи на бесконечные
циклы).

=item *

Реализация теперь ещё лучше избегает бессмысленной работы в режиме исполнения.
Внутренние бесполезные "null" операции (созданные как побочный эффект при
синтаксическом разборе Perl программы) обычно удаляются во время компиляции.
Это удаление теперь применяется в некоторых ситуациях, которые раньше не
обрабатывались.

=item *

Perl теперь меньше нагружает дисковую I/O подсистему, когда работает со
свойствами Юникода, которые покрывают до трёх последовательных диапазонов кодов
символов.

=back

=head1 Модули и прагмы

=head2 Новые модули и прагмы

=over 4

=item *

L<experimental> 0.007 был добавлен базовую поставку Perl.

=item *

L<IO::Socket::IP> 0.29 был добавлен в базовую поставку Perl.

=back

=head2 Обновлённые модули и прагмы

=over 4

=item *

L<Archive::Tar> был обновлён с версии 1.90 до 1.96.

=item *

L<arybase> был обновлён с версии 0.06 до 0.07.

=item *

L<Attribute::Handlers> был обновлён с версии 0.94 до 0.96.

=item *

L<attributes> был обновлён с версии 0.21 до 0.22.

=item *

L<autodie> был обновлён с версии 2.13 до 2.23.

=item *

L<AutoLoader> был обновлён с версии 5.73 до 5.74.

=item *

L<autouse> был обновлён с версии 1.07 до 1.08.

=item *

L<B> был обновлён с версии 1.42 до 1.48.

=item *

L<B::Concise> был обновлён с версии 0.95 до 0.992.

=item *

L<B::Debug> был обновлён с версии 1.18 до 1.19.

=item *

L<B::Deparse> был обновлён с версии 1.20 до 1.26.

=item *

L<base> был обновлён с версии 2.18 до 2.22.

=item *

L<Benchmark> был обновлён с версии 1.15 до 1.18.

=item *

L<bignum> был обновлён с версии 0.33 до 0.37.

=item *

L<Carp> был обновлён с версии 1.29 до 1.3301.

=item *

L<CGI> был обновлён с версии 3.63 до 3.65.
Внимание: L<CGI> устарел и может быть удалён из будущей версии Perl.

=item *

L<charnames> был обновлён с версии 1.36 до 1.40.

=item *

L<Class::Struct> был обновлён с версии 0.64 до 0.65.

=item *

L<Compress::Raw::Bzip2> был обновлён с версии 2.060 до 2.064.

=item *

L<Compress::Raw::Zlib> был обновлён с версии 2.060 до 2.065.

=item *

L<Config::Perl::V> был обновлён с версии 0.17 до 0.20.

=item *

L<constant> был обновлён с версии 1.27 до 1.31.

=item *

L<CPAN> был обновлён с версии 2.00 до 2.05.

=item *

L<CPAN::Meta> был обновлён с версии 2.120921 до 2.140640.

=item *

L<CPAN::Meta::Requirements> был обновлён с версии 2.122 до 2.125.

=item *

L<CPAN::Meta::YAML> был обновлён с версии 0.008 до 0.012.

=item *

L<Data::Dumper> был обновлён с версии 2.145 до 2.151.

=item *

L<DB> был обновлён с версии 1.04 до 1.07.

=item *

L<DB_File> был обновлён с версии 1.827 до 1.831.

=item *

L<DBM_Filter> был обновлён с версии 0.05 до 0.06.

=item *

L<deprecate> был обновлён с версии 0.02 до 0.03.

=item *

L<Devel::Peek> был обновлён с версии 1.11 до 1.16.

=item *

L<Devel::PPPort> был обновлён с версии 3.20 до 3.21.

=item *

L<diagnostics> был обновлён с версии 1.31 до 1.34.

=item *

L<Digest::MD5> был обновлён с версии 2.52 до 2.53.

=item *

L<Digest::SHA> был обновлён с версии 5.84 до 5.88.

=item *

L<DynaLoader> был обновлён с версии 1.18 до 1.25.

=item *

L<Encode> был обновлён с версии 2.49 до 2.60.

=item *

L<encoding> был обновлён с версии 2.6_01 до 2.12.

=item *

L<English> был обновлён с версии 1.06 до 1.09.

=item *

L<Errno> был обновлён с версии 1.18 до 1.20_03.

=item *

L<Exporter> был обновлён с версии 5.68 до 5.70.

=item *

L<ExtUtils::CBuilder> был обновлён с версии 0.280210 до 0.280216.

=item *

L<ExtUtils::Command> был обновлён с версии 1.17 до 1.18.

=item *

L<ExtUtils::Embed> был обновлён с версии 1.30 до 1.32.

=item *

L<ExtUtils::Install> был обновлён с версии 1.59 до 1.67.

=item *

L<ExtUtils::MakeMaker> был обновлён с версии 6.66 до 6.98.

=item *

L<ExtUtils::Miniperl> был обновлён с версии  до 1.01.

=item *

L<ExtUtils::ParseXS> был обновлён с версии 3.18 до 3.24.

=item *

L<ExtUtils::Typemaps> был обновлён с версии 3.19 до 3.24.

=item *

L<ExtUtils::XSSymSet> был обновлён с версии 1.2 до 1.3.

=item *

L<feature> был обновлён с версии 1.32 до 1.36.

=item *

L<fields> был обновлён с версии 2.16 до 2.17.

=item *

L<File::Basename> был обновлён с версии 2.84 до 2.85.

=item *

L<File::Copy> был обновлён с версии 2.26 до 2.29.

=item *

L<File::DosGlob> был обновлён с версии 1.10 до 1.12.

=item *

L<File::Fetch> был обновлён с версии 0.38 до 0.48.

=item *

L<File::Find> был обновлён с версии 1.23 до 1.27.

=item *

L<File::Glob> был обновлён с версии 1.20 до 1.23.

=item *

L<File::Spec> был обновлён с версии 3.40 до 3.47.

=item *

L<File::Temp> был обновлён с версии 0.23 до 0.2304.

=item *

L<FileCache> был обновлён с версии 1.08 до 1.09.

=item *

L<Filter::Simple> был обновлён с версии 0.89 до 0.91.

=item *

L<Filter::Util::Call> был обновлён с версии 1.45 до 1.49.

=item *

L<Getopt::Long> был обновлён с версии 2.39 до 2.42.

=item *

L<Getopt::Std> был обновлён с версии 1.07 до 1.10.

=item *

L<Hash::Util::FieldHash> был обновлён с версии 1.10 до 1.15.

=item *

L<HTTP::Tiny> был обновлён с версии 0.025 до 0.043.

=item *

L<I18N::Langinfo> был обновлён с версии 0.10 до 0.11.

=item *

L<I18N::LangTags> был обновлён с версии 0.39 до 0.40.

=item *

L<if> был обновлён с версии 0.0602 до 0.0603.

=item *

L<inc::latest> был обновлён с версии 0.4003 до 0.4205.
Внимание: L<inc::latest> устарел и может быть удалён из будущей версии Perl.

=item *

L<integer> был обновлён с версии 1.00 до 1.01.

=item *

L<IO> был обновлён с версии 1.28 до 1.31.

=item *

L<IO::Compress::Gzip> и друзья были обновлены с версии 2.060 до 2.064.

=item *

L<IPC::Cmd> был обновлён с версии 0.80 до 0.92.

=item *

L<IPC::Open3> был обновлён с версии 1.13 до 1.16.

=item *

L<IPC::SysV> был обновлён с версии 2.03 до 2.04.

=item *

L<JSON::PP> был обновлён с версии 2.27202 до 2.27203.

=item *

L<List::Util> был обновлён с версии 1.27 до 1.38.

=item *

L<locale> был обновлён с версии 1.02 до 1.03.

=item *

L<Locale::Codes> был обновлён с версии 3.25 до 3.30.

=item *

L<Locale::Maketext> был обновлён с версии 1.23 до 1.25.

=item *

L<Math::BigInt> был обновлён с версии 1.9991 до 1.9993.

=item *

L<Math::BigInt::FastCalc> был обновлён с версии 0.30 до 0.31.

=item *

L<Math::BigRat> был обновлён с версии 0.2604 до 0.2606.

=item *

L<MIME::Base64> был обновлён с версии 3.13 до 3.14.

=item *

L<Module::Build> был обновлён с версии 0.4003 до 0.4205.
Внимание: L<Module::Build> устарел и может быть удалён из будущей версии Perl.

=item *

L<Module::CoreList> был обновлён с версии 2.89 до 3.10.

=item *

L<Module::Load> был обновлён с версии 0.24 до 0.32.

=item *

L<Module::Load::Conditional> был обновлён с версии 0.54 до 0.62.

=item *

L<Module::Metadata> был обновлён с версии 1.000011 до 1.000019.

=item *

L<mro> был обновлён с версии 1.11 до 1.16.

=item *

L<Net::Ping> был обновлён с версии 2.41 до 2.43.

=item *

L<Opcode> был обновлён с версии 1.25 до 1.27.

=item *

L<Package::Constants> был обновлён с версии 0.02 до 0.04.
Внимание: L<Package::Constants> устарел и может быть удалён из будущей версии Perl.

=item *

L<Params::Check> был обновлён с версии 0.36 до 0.38.

=item *

L<parent> был обновлён с версии 0.225 до 0.228.

=item *

L<Parse::CPAN::Meta> был обновлён с версии 1.4404 до 1.4414.

=item *

L<Perl::OSType> был обновлён с версии 1.003 до 1.007.

=item *

L<perlfaq> был обновлён с версии 5.0150042 до 5.0150044.

=item *

L<PerlIO> был обновлён с версии 1.07 до 1.09.

=item *

L<PerlIO::encoding> был обновлён с версии 0.16 до 0.18.

=item *

L<PerlIO::scalar> был обновлён с версии 0.16 до 0.18.

=item *

L<PerlIO::via> был обновлён с версии 0.12 до 0.14.

=item *

L<Pod::Escapes> был обновлён с версии 1.04 до 1.06.

=item *

L<Pod::Functions> был обновлён с версии 1.06 до 1.08.

=item *

L<Pod::Html> был обновлён с версии 1.18 до 1.21.

=item *

L<Pod::Parser> был обновлён с версии 1.60 до 1.62.

=item *

L<Pod::Perldoc> был обновлён с версии 3.19 до 3.23.

=item *

L<Pod::Usage> был обновлён с версии 1.61 до 1.63.

=item *

L<POSIX> был обновлён с версии 1.32 до 1.38_03.

=item *

L<re> был обновлён с версии 0.23 до 0.26.

=item *

L<Safe> был обновлён с версии 2.35 до 2.37.

=item *

L<Scalar::Util> был обновлён с версии 1.27 до 1.38.

=item *

L<SDBM_File> был обновлён с версии 1.09 до 1.11.

=item *

L<Socket> был обновлён с версии 2.009 до 2.013.

=item *

L<Storable> был обновлён с версии 2.41 до 2.49.

=item *

L<strict> был обновлён с версии 1.07 до 1.08.

=item *

L<subs> был обновлён с версии 1.01 до 1.02.

=item *

L<Sys::Hostname> был обновлён с версии 1.17 до 1.18.

=item *

L<Sys::Syslog> был обновлён с версии 0.32 до 0.33.

=item *

L<Term::Cap> был обновлён с версии 1.13 до 1.15.

=item *

L<Term::ReadLine> был обновлён с версии 1.12 до 1.14.

=item *

L<Test::Harness> был обновлён с версии 3.26 до 3.30.

=item *

L<Test::Simple> был обновлён с версии 0.98 до 1.001002.

=item *

L<Text::ParseWords> был обновлён с версии 3.28 до 3.29.

=item *

L<Text::Tabs> был обновлён с версии 2012.0818 до 2013.0523.

=item *

L<Text::Wrap> был обновлён с версии 2012.0818 до 2013.0523.

=item *

L<Thread> был обновлён с версии 3.02 до 3.04.

=item *

L<Thread::Queue> был обновлён с версии 3.02 до 3.05.

=item *

L<threads> был обновлён с версии 1.86 до 1.93.

=item *

L<threads::shared> был обновлён с версии 1.43 до 1.46.

=item *

L<Tie::Array> был обновлён с версии 1.05 до 1.06.

=item *

L<Tie::File> был обновлён с версии 0.99 до 1.00.

=item *

L<Tie::Hash> был обновлён с версии 1.04 до 1.05.

=item *

L<Tie::Scalar> был обновлён с версии 1.02 до 1.03.

=item *

L<Tie::StdHandle> был обновлён с версии 4.3 до 4.4.

=item *

L<Time::HiRes> был обновлён с версии 1.9725 до 1.9726.

=item *

L<Time::Piece> был обновлён с версии 1.20_01 до 1.27.

=item *

L<Unicode::Collate> был обновлён с версии 0.97 до 1.04.

=item *

L<Unicode::Normalize> был обновлён с версии 1.16 до 1.17.

=item *

L<Unicode::UCD> был обновлён с версии 0.51 до 0.57.

=item *

L<utf8> был обновлён с версии 1.10 до 1.13.

=item *

L<version> был обновлён с версии 0.9902 до 0.9908.

=item *

L<vmsish> был обновлён с версии 1.03 до 1.04.

=item *

L<warnings> был обновлён с версии 1.18 до 1.23.

=item *

L<Win32> был обновлён с версии 0.47 до 0.49.

=item *

L<XS::Typemap> был обновлён с версии 0.10 до 0.13.

=item *

L<XSLoader> был обновлён с версии 0.16 до 0.17.

=back

=head1 Документация

=head2 Новая документация

=head3 L<perlrepository>

Этот документ был удалён (на самом деле переименован в L<perlgit>, получив
тщательный пересмотр) в Perl v5.14, приведя к тому, что веб-сайты с
документацией Perl показывали устаревшую версию из Perl v5.12 как последнюю
версию. Теперь он был восстановлен в форме заглушки, направляя читателя к
текущей информации.

=head2 Изменения в существующей документации

=head3 L<perldata>

=over 4

=item *

В документ Была добавлена новая секция о новом синтаксисе идекса/значения среза
массива и ключе/значении среза хэша.

=back

=head3 L<perldebguts>

=over 4

=item *

Подпрограммы отладчика C<DB::goto> и C<DB::lsub> теперь задокументированы.
[perl #77680]

=back

=head3 L<perlexperiment>

=over

=item *

C<\s>, совпадающее с C<\cK>, отмечено как экспериментальное.

=item *

ithreads были приняты в v5.8.0 (но не рекомендуются с v5.20.0).

=item *

Числа с плавающей запятой выше двойной точности больше не рассматриваются
экспериментальными.

=item *

Код в регулярных выражениях, перебор с возвратом в регулярных выражениях и
lvalue-подпрограммы больше не указываются как экспериментальные. (Это также
затрагивает L<perlre> и L<perlsub>.)

=back

=head3 L<perlfunc>

=over

=item *

В C<chop> и C<chomp> теперь есть замечание, что они могут сбросить итератор
хеша.

=item *

Обработка аргументов в C<exec> теперь задокументирована более чётко.

=item *

C<eval EXPR> теперь содержит предупреждение о расширении чисел с плавающей
запятой в некоторых локалях.

=item *

В C<goto EXPR> теперь задокументировано, что поддерживаются выражения, которые
вычисляются в ссылку на код, как если было записано C<goto &$coderef>. Такому
поведению уже как минимум десять лет.

=item *

Начиная с Perl v5.10, присутствовала возможность для подпрограмм в C<@INC>
возвращать ссылку на скаляр, содержащий начальный фрагмент исходного кода для
вставки в начало файла. Теперь это задокументировано.

=item *

Была обновлена документация C<ref> с рекомендацией использования C<blessed>,
C<isa> и C<reftype> при работе с ссылками на благословлённые объекты.

=back

=head3 L<perlguts>

=over 4

=item *

Было сделано несколько небольших изменений, отражающих внутренние изменения
сделанные в этом релизе perl.

=item *

Были добавлены новые секции: L<Значения только для чтения|perlguts/"Read-Only Values"> и
L<Копирование при записи|perlguts/"Copy on Write">

=back

=head3 L<perlhack>

=over 4

=item *

Была обновлена секция L<Супер быстрое руководство по патчам|perlhack/SUPER
QUICK PATCH GUIDE>.

=back

=head3 L<perlhacktips>

=over 4

=item *

Обновлена документация, включившая ещё несколько примеров использования C<gdb>.

=back

=head2 L<perllexwarn>

=over 4

=item *

Документация L<perllexwarn> раньше описывала иерархию категорий предупреждений,
которые понимает прагма L<warnings>. Это описание теперь перенесено в саму
документацию L<warnings>, оставляя L<perllexwarn> как заглушку к ней. Это
изменение объединяет всю документацию для лексчиеских предупреждений в одном
месте.

=back

=head3 L<perllocale>

=over

=item *

Документация теперь упоминает F<fc()> и C<\F>, и включает множество общих
пояснений и исправлений.

=back

=head3 L<perlop>

=over 4

=item *

Дизайн языка Perl всегда призывал к мономорфным оператором. Теперь это
упоминается явно.

=back

=head3 L<perlopentut>

=over 4

=item *

Руководство по C<open> было полностью переписано Томом Кристиансеном и теперь
фокусируется на раскрытии только основ, вместо предоставления всеобъемлющей
документации по всем вещам, которые можно открыть. Эта работа появилась
вследствие активного обсуждения в perl5-porters начатое с набора улучшений,
написанных Александром Хартмайером в существующий L<perlopentut>. Документ
"больше, чем вы когда-либо захотите узнать об C<open>" может последовать в
следующих версиях perl.

=back

=head3 L<perlre>

=over 4

=item *

Тот факт, что движок регулярных выражений не делает попыток вызова конструкций
(?{}) и (??{}) любое указанное число раз (хотя он в целом DWIM в случае
успешного совпадения) было задокументировано.

=item *

C</r> модификатор (для недеструктивных замен) теперь задокументирован.[perl
#119151]

=item *

Документация для C</x> и C<(?# comment)> была расширена и прояснена.

=back

=head3 L<perlreguts>

=over 4

=item *

Документация была обновлена в свете последних изменений в F<regcomp.c>.

=back

=head3 L<perlsub>

=over 4

=item *

Теперь задокументирована необходимость предекларации рекурсивных функций
прототипами для того, чтобы эти прототипы учитывались в рекурсивных вызовах.
[perl #2726]

=item *

Теперь включён список имён подпрограмм, используемые в реализации perl. [perl
#77680]

=back

=head3 L<perltrap>

=over 4

=item *

Появилась секция L<JavaScript|perltrap/JavaScript Traps>.

=back

=head3 L<perlunicode>

=over 4

=item *

Обновлена документация для отражения изменений в C<Bidi_Class> в Юникоде 6.3.

=back

=head3 L<perlvar>

=over 4

=item *

Была добавлена новая секция, объясняющая проблемы с производительностью в $`,
$& и $', включая способы обхода и изменения в различных версиях Perl.

=item *

Три L<English> имени переменных, которые долго были задокументированы, но на
самом деле не существовали, были удалены из документации. Это были
C<$OLD_PERL_VERSION>, C<$OFMT> и C<$ARRAY_BASE>.

=back

=head3 L<perlxs>

=over 4

=item *

Было исправлено несколько проблем в примере C<MY_CXT>.

=back

=head1 Диагностика

Следующие дополнения и изменения было сделано в диагностическом вывод, включая
предупреждения и фатальные сообщения об ошибках. Для полного списка
диагностических сообщений смотрите L<perldiag>.

=head2 Новая диагностика

=head3 Новые ошибки

=over 4

=item *

L<delete argument is indexE<sol>value array slice, use array slice|perldiag/"delete argument is index/value array slice, use array slice">

(F) You used index/value array slice syntax (C<%array[...]>) as the argument to
C<delete>.  You probably meant C<@array[...]> with an @ symbol instead.

=item *

L<delete argument is keyE<sol>value hash slice, use hash slice|perldiag/"delete argument is key/value hash slice, use hash slice">

(F) You used key/value hash slice syntax (C<%hash{...}>) as the argument to
C<delete>.  You probably meant C<@hash{...}> with an @ symbol instead.

=item *

L<Magical list constants are not supported|perldiag/"Magical list constants are
not supported">

(F) You assigned a magical array to a stash element, and then tried to use the
subroutine from the same slot.  You are asking Perl to do something it cannot
do, details subject to change between Perl versions.

=item *

Added L<Setting $E<sol> to a %s reference is forbidden|perldiag/"Setting $E<sol> to %s reference is forbidden">

=back

=head3 New Warnings

=over 4

=item *

L<%s on reference is experimental|perldiag/"push on reference is experimental">:

The "auto-deref" feature is experimental.

Starting in v5.14.0, it was possible to use push, pop, keys, and other
built-in functions not only on aggregate types, but on references to
them.  The feature was not deployed to its original intended
specification, and now may become redundant to postfix dereferencing.
It has always been categorized as an experimental feature, and in
v5.20.0 is carries a warning as such.

Warnings will now be issued at compile time when these operations are
detected.

  no if $] >= 5.01908, warnings => "experimental::autoderef";

Consider, though, replacing the use of these features, as they may
change behavior again before becoming stable.

=item *

L<A sequence of multiple spaces in a charnames alias definition is deprecated|perldiag/"A sequence of multiple spaces in a charnames alias definition is deprecated">

L<Trailing white-space in a charnames alias definition is deprecated|perldiag/"Trailing white-space in a charnames alias definition is deprecated">

These two deprecation warnings involving C<\N{...}> were incorrectly
implemented.  They did not warn by default (now they do) and could not be
made fatal via C<< use warnings FATAL => 'deprecated' >> (now they can).

=item *

L<Attribute prototype(%s) discards earlier prototype attribute in same sub|perldiag/"Attribute prototype(%s) discards earlier prototype attribute in same sub">

(W misc) A sub was declared as C<sub foo : prototype(A) : prototype(B) {}>, for
example.  Since each sub can only have one prototype, the earlier
declaration(s) are discarded while the last one is applied.

=item *

L<Invalid \0 character in %s for %s: %s\0%s|perldiag/"Invalid \0 character in %s for %s: %s\0%s">

(W syscalls) Embedded \0 characters in pathnames or other system call arguments
produce a warning as of 5.20.  The parts after the \0 were formerly ignored by
system calls.

=item *

L<Matched non-Unicode code point 0x%X against Unicode property; may not be portable|perldiag/"Matched non-Unicode code point 0x%X against Unicode property; may not be portable">.

This replaces the message "Code point 0x%X is not Unicode, all \p{} matches
fail; all \P{} matches succeed".

=item *

L<Missing ']' in prototype for %s : %s|perldiag/"Missing ']' in prototype for %s : %s">

(W illegalproto) A grouping was started with C<[> but never closed with C<]>.

=item *

L<Possible precedence issue with control flow operator|perldiag/"Possible precedence issue with control flow operator">

(W syntax) There is a possible problem with the mixing of a control flow
operator (e.g. C<return>) and a low-precedence operator like C<or>.  Consider:

    sub { return $a or $b; }

This is parsed as:

    sub { (return $a) or $b; }

Which is effectively just:

    sub { return $a; }

Either use parentheses or the high-precedence variant of the operator.

Note this may be also triggered for constructs like:

    sub { 1 if die; }

=item *

L<Postfix dereference is experimental|perldiag/"Postfix dereference is experimental">

(S experimental::postderef) This warning is emitted if you use the experimental
postfix dereference syntax.  Simply suppress the warning if you want to use the
feature, but know that in doing so you are taking the risk of using an
experimental feature which may change or be removed in a future Perl version:

    no warnings "experimental::postderef";
    use feature "postderef", "postderef_qq";
    $ref->$*;
    $aref->@*;
    $aref->@[@indices];
    ... etc ...

=item *

L<Prototype '%s' overridden by attribute 'prototype(%s)' in %s|perldiag/"Prototype '%s' overridden by attribute 'prototype(%s)' in %s">

(W prototype) A prototype was declared in both the parentheses after the sub
name and via the prototype attribute.  The prototype in parentheses is useless,
since it will be replaced by the prototype from the attribute before it's ever
used.

=item *

L<Scalar value @%s[%s] better written as $%s[%s]|perldiag/"Scalar value @%s[%s] better written as $%s[%s]">

(W syntax) In scalar context, you've used an array index/value slice (indicated
by %) to select a single element of an array.  Generally it's better to ask for
a scalar value (indicated by $).  The difference is that C<$foo[&bar]> always
behaves like a scalar, both in the value it returns and when evaluating its
argument, while C<%foo[&bar]> provides a list context to its subscript, which
can do weird things if you're expecting only one subscript.  When called in
list context, it also returns the index (what C<&bar> returns) in addition to
the value.

=item *

L<Scalar value @%s{%s} better written as $%s{%s}|perldiag/"Scalar value @%s{%s} better written as $%s{%s}">

(W syntax) In scalar context, you've used a hash key/value slice (indicated by
%) to select a single element of a hash.  Generally it's better to ask for a
scalar value (indicated by $).  The difference is that C<$foo{&bar}> always
behaves like a scalar, both in the value it returns and when evaluating its
argument, while C<@foo{&bar}> and provides a list context to its subscript,
which can do weird things if you're expecting only one subscript.  When called
in list context, it also returns the key in addition to the value.

=item *

L<Setting $E<sol> to a reference to %s as a form of slurp is deprecated, treating as undef|perldiag/"Setting $E<sol> to a reference to %s as a form of slurp is deprecated, treating as undef">

=item *

L<Unexpected exit %u|perldiag/"Unexpected exit %u">

(S) exit() was called or the script otherwise finished gracefully when
C<PERL_EXIT_WARN> was set in C<PL_exit_flags>.

=item *

L<Unexpected exit failure %d|perldiag/"Unexpected exit failure %d">

(S) An uncaught die() was called when C<PERL_EXIT_WARN> was set in
C<PL_exit_flags>.

=item *

L<Use of literal control characters in variable names is deprecated|perldiag/"Use of literal control characters in variable names is deprecated">

(D deprecated) Using literal control characters in the source to refer to the
^FOO variables, like $^X and ${^GLOBAL_PHASE} is now deprecated.  This only
affects code like $\cT, where \cT is a control (like a C<SOH>) in the
source code: ${"\cT"} and $^T remain valid.

=item *

L<Useless use of greediness modifier|perldiag/"Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%s/">

This fixes [Perl #42957].

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

Warnings and errors from the regexp engine are now UTF-8 clean.

=item *

The "Unknown switch condition" error message has some slight changes.  This
error triggers when there is an unknown condition in a C<(?(foo))> conditional.
The error message used to read:

    Unknown switch condition (?(%s in regex;

But what %s could be was mostly up to luck.  For C<(?(foobar))>, you might have
seen "fo" or "f".  For Unicode characters, you would generally get a corrupted
string.  The message has been changed to read:

    Unknown switch condition (?(...)) in regex;

Additionally, the C<'E<lt>-- HERE'> marker in the error will now point to the
correct spot in the regex.

=item *

The "%s "\x%X" does not map to Unicode" warning is now correctly listed as a
severe warning rather than as a fatal error.

=item *

Under rare circumstances, one could get a "Can't coerce readonly REF to
string" instead of the customary "Modification of a read-only value".  This
alternate error message has been removed.

=item *

"Ambiguous use of * resolved as operator *": This and similar warnings
about "%" and "&" used to occur in some circumstances where there was no
operator of the type cited, so the warning was completely wrong.  This has
been fixed [perl #117535, #76910].

=item *

Warnings about malformed subroutine prototypes are now more consistent in
how the prototypes are rendered.  Some of these warnings would truncate
prototypes containing nulls.  In other cases one warning would suppress
another.  The warning about illegal characters in prototypes no longer says
"after '_'" if the bad character came before the underscore.

=item *

L<Perl folding rules are not up-to-date for 0x%X; please use the perlbug
utility to report; in regex; marked by <-- HERE in
mE<sol>%sE<sol>|perldiag/"Perl folding rules are not up-to-date for 0x%X;
please use the perlbug utility to report; in regex; marked by <-- HERE in
m/%s/">

This message is now only in the regexp category, and not in the deprecated
category.  It is still a default (i.e., severe) warning [perl #89648].

=item *

L<%%s[%s] in scalar context better written as $%s[%s]|perldiag/"%%s[%s] in scalar context better written as $%s[%s]">

This warning now occurs for any C<%array[$index]> or C<%hash{key}> known to
be in scalar context at compile time.  Previously it was worded "Scalar
value %%s[%s] better written as $%s[%s]".

=item *

L<Switch condition not recognized in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Switch condition not recognized in regex; marked by <-- HERE in m/%s/">:

The description for this diagnostic has been extended to cover all cases where the warning may occur.
Issues with the positioning of the arrow indicator have also been resolved.

=item *

The error messages for C<my($a?$b$c)> and C<my(do{})> now mention "conditional
expression" and "do block", respectively, instead of reading 'Can't declare
null operation in "my"'.

=item *

When C<use re "debug"> executes a regex containing a backreference, the
debugging output now shows what string is being matched.

=item *

The now fatal error message C<Character following "\c" must be ASCII> has been
reworded as C<Character following "\c" must be printable ASCII> to emphasize
that in C<\cI<X>>, I<X> must be a I<printable (non-control)> ASCII character.

=back

=head1 Utility Changes

=head3 L<a2p>

=over 4

=item *

A possible crash from an off-by-one error when trying to access before the
beginning of a buffer has been fixed.  [perl #120244]

=back

=head3 F<bisect.pl>

The git bisection tool F<Porting/bisect.pl> has had many enhancements.

It is provided as part of the source distribution but not installed because
it is not self-contained as it relies on being run from within a git
checkout. Note also that it makes no attempt to fix tests, correct runtime
bugs or make something useful to install - its purpose is to make minimal
changes to get any historical revision of interest to build and run as close
as possible to "as-was", and thereby make C<git bisect> easy to use.

=over 4

=item *

Can optionally run the test case with a timeout.

=item *

Can now run in-place in a clean git checkout.

=item *

Can run the test case under C<valgrind>.

=item *

Can apply user supplied patches and fixes to the source checkout before
building.

=item *

Now has fixups to enable building several more historical ranges of bleadperl,
which can be useful for pinpointing the origins of bugs or behaviour changes.

=back

=head3 L<find2perl>

=over 4

=item *

L<find2perl> now handles C<?> wildcards correctly.  [perl #113054]

=back

=head3 L<perlbug>

=over 4

=item *

F<perlbug> now has a C<-p> option for attaching patches with a bug report.

=item *

L<perlbug> has been modified to supply the report template with CRLF line
endings on Windows.
[L<perl #121277|https://rt.perl.org/Public/Bug/Display.html?id=121277>]

=item *

L<perlbug> now makes as few assumptions as possible about the encoding of the
report.  This will likely change in the future to assume UTF-8 by default but
allow a user override.

=back

=head1 Configuration and Compilation

=over 4

=item *

The F<Makefile.PL> for L<SDBM_File> now generates a better F<Makefile>, which
avoids a race condition during parallel makes, which could cause the build to
fail.  This is the last known parallel make problem (on *nix platforms), and
therefore we believe that a parallel make should now always be error free.

=item *

F<installperl> and F<installman>'s option handling has been refactored to use
L<Getopt::Long>. Both are used by the F<Makefile> C<install> targets, and
are not installed, so these changes are only likely to affect custom
installation scripts.

=over 4

=item *

Single letter options now also have long names.

=item *

Invalid options are now rejected.

=item *

Command line arguments that are not options are now rejected.

=item *

Each now has a C<--help> option to display the usage message.

=back

The behaviour for all valid documented invocations is unchanged.

=item *

Where possible, the build now avoids recursive invocations of F<make> when
building pure-Perl extensions, without removing any parallelism from the
build. Currently around 80 extensions can be processed directly by the
F<make_ext.pl> tool, meaning that 80 invocations of F<make> and 160
invocations of F<miniperl> are no longer made.

=item *

The build system now works correctly when compiling under GCC or Clang with
link-time optimization enabled (the C<-flto> option). [perl #113022]

=item *

Distinct library basenames with C<d_libname_unique>.

When compiling perl with this option, the library files for XS modules are
named something "unique" -- for example, Hash/Util/Util.so becomes
Hash/Util/PL_Hash__Util.so.  This behavior is similar to what currently
happens on VMS, and serves as groundwork for the Android port.

=item *

C<sysroot> option to indicate the logical root directory under gcc and clang.

When building with this option set, both Configure and the compilers search
for all headers and libraries under this new sysroot, instead of /.

This is a huge time saver if cross-compiling, but can also help
on native builds if your toolchain's files have non-standard locations.

=item *

The cross-compilation model has been renovated.
There's several new options, and some backwards-incompatible changes:

We now build binaries for miniperl and generate_uudmap to be used on the host,
rather than running every miniperl call on the target; this means that, short
of 'make test', we no longer need access to the target system once Configure is
done.  You can provide already-built binaries through the C<hostperl> and
C<hostgenerate> options to Configure.

Additionally, if targeting an EBCDIC platform from an ASCII host,
or viceversa, you'll need to run Configure with C<-Uhostgenerate>, to
indicate that generate_uudmap should be run on the target.

Finally, there's also a way of having Configure end early, right after
building the host binaries, by cross-compiling without specifying a
C<targethost>.

The incompatible changes include no longer using xconfig.h, xlib, or
Cross.pm, so canned config files and Makefiles will have to be updated.

=item *

Related to the above, there is now a way of specifying the location of sh
(or equivalent) on the target system: C<targetsh>.

For example, Android has its sh in /system/bin/sh, so if cross-compiling
from a more normal Unixy system with sh in /bin/sh, "targetsh" would end
up as /system/bin/sh, and "sh" as /bin/sh.

=item *

By default, B<gcc> 4.9 does some optimizations that break perl.  The B<-fwrapv>
option disables those optimizations (and probably others), so for B<gcc> 4.3
and later (since the there might be similar problems lurking on older versions
too, but B<-fwrapv> was broken before 4.3, and the optimizations probably won't
go away), F<Configure> now adds B<-fwrapv> unless the user requests
B<-fno-wrapv>, which disables B<-fwrapv>, or B<-fsanitize=undefined>, which
turns the overflows B<-fwrapv> ignores into runtime errors.
[L<perl #121505|https://rt.perl.org/Public/Bug/Display.html?id=121505>]

=back

=head1 Testing

=over 4

=item *

The C<test.valgrind> make target now allows tests to be run in parallel.
This target allows Perl's test suite to be run under Valgrind, which detects
certain sorts of C programming errors, though at significant cost in running
time. On suitable hardware, allowing parallel execution claws back a lot of
that additional cost. [perl #121431]

=item *

Various tests in F<t/porting/> are no longer skipped when the perl
F<.git> directory is outside the perl tree and pointed to by
C<$GIT_DIR>. [perl #120505]

=item *

The test suite no longer fails when the user's interactive shell maintains a
C<$PWD> environment variable, but the F</bin/sh> used for running tests
doesn't.

=back

=head1 Platform Support

=head2 New Platforms

=over 4

=item Android

Perl can now be built for Android, either natively or through
cross-compilation, for all three currently available architectures (ARM,
MIPS, and x86), on a wide range of versions.

=item Bitrig

Compile support has been added for Bitrig, a fork of OpenBSD.

=item FreeMiNT

Support has been added for FreeMiNT, a free open-source OS for the Atari ST
system and its successors, based on the original MiNT that was officially
adopted by Atari.

=item Synology

Synology ships its NAS boxes with a lean Linux distribution (DSM) on relative
cheap CPU's (like the Marvell Kirkwood mv6282 - ARMv5tel or Freescale QorIQ
P1022 ppc - e500v2) not meant for workstations or development. These boxes
should build now. The basic problems are the non-standard location for tools.

=back

=head2 Discontinued Platforms

=over 4

=item C<sfio>

Code related to supporting the C<sfio> I/O system has been removed.

Perl 5.004 added support to use the native API of C<sfio>, AT&T's Safe/Fast
I/O library. This code still built with v5.8.0, albeit with many regression
tests failing, but was inadvertently broken before the v5.8.1 release,
meaning that it has not worked on any version of Perl released since then.
In over a decade we have received no bug reports about this, hence it is clear
that no-one is using this functionality on any version of Perl that is still
supported to any degree.

=item AT&T 3b1

Configure support for the 3b1, also known as the AT&T Unix PC (and the similar
AT&T 7300), has been removed.

=item DG/UX

DG/UX was a Unix sold by Data General. The last release was in April 2001.
It only runs on Data General's own hardware.

=item EBCDIC

In the absence of a regular source of smoke reports, code intended to support
native EBCDIC platforms will be removed from perl before 5.22.0.

=back

=head2 Platform-Specific Notes

=over 4

=item Cygwin

=over 4

=item *

recv() on a connected handle would populate the returned sender
address with whatever happened to be in the working buffer.  recv()
now uses a workaround similar to the Win32 recv() wrapper and returns
an empty string when recvfrom(2) doesn't modify the supplied address
length. [perl #118843]

=item *

Fixed a build error in cygwin.c on Cygwin 1.7.28.

Tests now handle the errors that occur when C<cygserver> isn't
running.

=back

=item GNU/Hurd

The BSD compatibility library C<libbsd> is no longer required for builds.

=item Linux

The hints file now looks for C<libgdbm_compat> only if C<libgdbm> itself is
also wanted. The former is never useful without the latter, and in some
circumstances, including it could actually prevent building.

=item Mac OS

The build system now honors an C<ld> setting supplied by the user running
F<Configure>.

=item MidnightBSD

C<objformat> was removed from version 0.4-RELEASE of MidnightBSD and had been
deprecated on earlier versions.  This caused the build environment to be
erroneously configured for C<a.out> rather than C<elf>.  This has been now
been corrected.

=item Mixed-endian platforms

The code supporting C<pack> and C<unpack> operations on mixed endian
platforms has been removed. We believe that Perl has long been unable to
build on mixed endian architectures (such as PDP-11s), so we don't think
that this change will affect any platforms which were able to build v5.18.0.

=item VMS

=over 4

=item *

The C<PERL_ENV_TABLES> feature to control the population of %ENV at perl
start-up was broken in Perl 5.16.0 but has now been fixed.

=item *

Skip access checks on remotes in opendir().  [perl #121002]

=item *

A check for glob metacharacters in a path returned by the
L<C<glob()>|perlfunc/glob> operator has been replaced with a check for VMS
wildcard characters.  This saves a significant number of unnecessary
L<C<lstat()>|perlfunc/lstat> calls such that some simple glob operations become
60-80% faster.

=back

=item Win32

=over 4

=item *

C<rename> and C<link> on Win32 now set $! to ENOSPC and EDQUOT when
appropriate.  [perl #119857]

=item *

The BUILD_STATIC and ALL_STATIC makefile options for linking some or (nearly)
all extensions statically (into perl520.dll, and into a separate
perl-static.exe too) were broken for MinGW builds. This has now been fixed.

The ALL_STATIC option has also been improved to include the Encode and Win32
extensions (for both VC++ and MinGW builds).

=item *

Support for building with Visual C++ 2013 has been added.  There are currently
two possible test failures (see L<perlwin32/"Testing Perl on Windows">) which
will hopefully be resolved soon.

=item *

Experimental support for building with Intel C++ Compiler has been added.  The
nmake makefile (win32/Makefile) and the dmake makefile (win32/makefile.mk) can
be used.  A "nmake test" will not pass at this time due to F<cpan/CGI/t/url.t>.

=item *

Killing a process tree with L<perlfunc/kill> and a negative signal, was broken
starting in 5.18.0. In this bug, C<kill> always returned 0 for a negative
signal even for valid PIDs, and no processes were terminated. This has been
fixed [perl #121230].

=item *

The time taken to build perl on Windows has been reduced quite significantly
(time savings in the region of 30-40% are typically seen) by reducing the
number of, usually failing, I/O calls for each L<C<require()>|perlfunc/require>
(for B<miniperl.exe> only).
[L<perl #121119|https://rt.perl.org/Public/Bug/Display.html?id=121119>]

=item *

About 15 minutes of idle sleeping was removed from running C<make test> due to
a bug in which the timeout monitor used for tests could not be cancelled once
the test completes, and the full timeout period elapsed before running the next
test file.
[L<perl #121395|https://rt.perl.org/Public/Bug/Display.html?id=121395>]

=item *

On a perl built without pseudo-fork (pseudo-fork builds were not affected by
this bug), killing a process tree with L<C<kill()>|perlfunc/kill> and a negative
signal resulted in C<kill()> inverting the returned value.  For example, if
C<kill()> killed 1 process tree PID then it returned 0 instead of 1, and if
C<kill()> was passed 2 invalid PIDs then it returned 2 instead of 0.  This has
probably been the case since the process tree kill feature was implemented on
Win32.  It has now been corrected to follow the documented behaviour.
[L<perl #121230|https://rt.perl.org/Public/Bug/Display.html?id=121230>]

=item *

When building a 64-bit perl, an uninitialized memory read in B<miniperl.exe>,
used during the build process, could lead to a 4GB B<wperl.exe> being created.
This has now been fixed.  (Note that B<perl.exe> itself was unaffected, but
obviously B<wperl.exe> would have been completely broken.)
[L<perl #121471|https://rt.perl.org/Public/Bug/Display.html?id=121471>]

=item *

Perl can now be built with B<gcc> version 4.8.1 from L<http://www.mingw.org>.
This was previously broken due to an incorrect definition of DllMain() in one
of perl's source files.  Earlier B<gcc> versions were also affected when using
version 4 of the w32api package.  Versions of B<gcc> available from
L<http://mingw-w64.sourceforge.net/> were not affected.
[L<perl #121643|https://rt.perl.org/Public/Bug/Display.html?id=121643>]

=item *

The test harness now has no failures when perl is built on a FAT drive with the
Windows OS on an NTFS drive.
[L<perl #21442|https://rt.perl.org/Public/Bug/Display.html?id=21442>]

=item *

When cloning the context stack in fork() emulation, Perl_cx_dup()
would crash accessing parameter information for context stack entries
that included no parameters, as with C<&foo;>.
[L<perl #121721|https://rt.perl.org/Public/Bug/Display.html?id=121721>]

=item *

Introduced by
L<perl #113536|https://rt.perl.org/Public/Bug/Display.html?id=113536>, a memory
leak on every call to C<system> and backticks (C< `` >), on most Win32 Perls
starting from 5.18.0 has been fixed.  The memory leak only occurred if you
enabled psuedo-fork in your build of Win32 Perl, and were running that build on
Server 2003 R2 or newer OS.  The leak does not appear on WinXP SP3.
[L<perl #121676|https://rt.perl.org/Public/Bug/Display.html?id=121676>]

=back

=item WinCE

=over 4

=item *

The building of XS modules has largely been restored.  Several still cannot
(yet) be built but it is now possible to build Perl on WinCE with only a couple
of further patches (to L<Socket> and L<ExtUtils::MakeMaker>), hopefully to be
incorporated soon.

=item *

Perl can now be built in one shot with no user intervention on WinCE by running
C<nmake -f Makefile.ce all>.

Support for building with EVC (Embedded Visual C++) 4 has been restored.  Perl
can also be built using Smart Devices for Visual C++ 2005 or 2008.

=back

=back

=head1 Internal Changes

=over 4

=item *

The internal representation has changed for the match variables $1, $2 etc.,
$`, $&, $', ${^PREMATCH}, ${^MATCH} and ${^POSTMATCH}.  It uses slightly less
memory, avoids string comparisons and numeric conversions during lookup, and
uses 23 fewer lines of C.  This change should not affect any external code.

=item *

Arrays now use NULL internally to represent unused slots, instead of
&PL_sv_undef.  &PL_sv_undef is no longer treated as a special value, so
av_store(av, 0, &PL_sv_undef) will cause element 0 of that array to hold a
read-only undefined scalar.  C<$array[0] = anything> will croak and
C<\$array[0]> will compare equal to C<\undef>.

=item *

The SV returned by HeSVKEY_force() now correctly reflects the UTF8ness of the
underlying hash key when that key is not stored as a SV.  [perl #79074]

=item *

Certain rarely used functions and macros available to XS code are now
deprecated.  These are:
C<utf8_to_uvuni_buf> (use C<utf8_to_uvchr_buf> instead),
C<valid_utf8_to_uvuni> (use C<utf8_to_uvchr_buf> instead),
C<NATIVE_TO_NEED> (this did not work properly anyway),
and C<ASCII_TO_NEED> (this did not work properly anyway).

Starting in this release, almost never does application code need to
distinguish between the platform's character set and Latin1, on which the
lowest 256 characters of Unicode are based.  New code should not use
C<utf8n_to_uvuni> (use C<utf8_to_uvchr_buf> instead),
nor
C<uvuni_to_utf8> (use C<uvchr_to_utf8> instead),

=item *

The Makefile shortcut targets for many rarely (or never) used testing and
profiling targets have been removed, or merged into the only other Makefile
target that uses them.  Specifically, these targets are gone, along with
documentation that referenced them or explained how to use them:

    check.third check.utf16 check.utf8 coretest minitest.prep
    minitest.utf16 perl.config.dashg perl.config.dashpg
    perl.config.gcov perl.gcov perl.gprof perl.gprof.config
    perl.pixie perl.pixie.atom perl.pixie.config perl.pixie.irix
    perl.third perl.third.config perl.valgrind.config purecovperl
    pureperl quantperl test.deparse test.taintwarn test.third
    test.torture test.utf16 test.utf8 test_notty.deparse
    test_notty.third test_notty.valgrind test_prep.third
    test_prep.valgrind torturetest ucheck ucheck.third ucheck.utf16
    ucheck.valgrind utest utest.third utest.utf16 utest.valgrind

It's still possible to run the relevant commands by "hand" - no underlying
functionality has been removed.

=item *

It is now possible to keep Perl from initializing locale handling.
For the most part, Perl doesn't pay attention to locale.  (See
L<perllocale>.)  Nonetheless, until now, on startup, it has always
initialized locale handling to the system default, just in case the
program being executed ends up using locales.  (This is one of the first
things a locale-aware program should do, long before Perl knows if it
will actually be needed or not.)  This works well except when Perl is
embedded in another application which wants a locale that isn't the
system default.  Now, if the environment variable
C<PERL_SKIP_LOCALE_INIT> is set at the time Perl is started, this
initialization step is skipped.  Prior to this, on Windows platforms,
the only workaround for this deficiency was to use a hacked-up copy of
internal Perl code.  Applications that need to use older Perls can
discover if the embedded Perl they are using needs the workaround by
testing that the C preprocessor symbol C<HAS_SKIP_LOCALE_INIT> is not
defined.  [RT #38193]

=item *

C<BmRARE> and C<BmPREVIOUS> have been removed.  They were not used anywhere
and are not part of the API.  For XS modules, they are now #defined as 0.

=item *

C<sv_force_normal>, which usually croaks on read-only values, used to allow
read-only values to be modified at compile time.  This has been changed to
croak on read-only values regardless.  This change uncovered several core
bugs.

=item *

Perl's new copy-on-write mechanism  (which is now enabled by default),
allows any C<SvPOK> scalar to be automatically upgraded to a copy-on-write
scalar when copied. A reference count on the string buffer is stored in
the string buffer itself.

For example:

    $ perl -MDevel::Peek -e'$a="abc"; $b = $a; Dump $a; Dump $b'
    SV = PV(0x260cd80) at 0x2620ad8
      REFCNT = 1
      FLAGS = (POK,IsCOW,pPOK)
      PV = 0x2619bc0 "abc"\0
      CUR = 3
      LEN = 16
      COW_REFCNT = 1
    SV = PV(0x260ce30) at 0x2620b20
      REFCNT = 1
      FLAGS = (POK,IsCOW,pPOK)
      PV = 0x2619bc0 "abc"\0
      CUR = 3
      LEN = 16
      COW_REFCNT = 1

Note that both scalars share the same PV buffer and have a COW_REFCNT
greater than zero.

This means that XS code which wishes to modify the C<SvPVX()> buffer of an
SV should call C<SvPV_force()> or similar first, to ensure a valid (and
unshared) buffer, and to call C<SvSETMAGIC()> afterwards. This in fact has
always been the case (for example hash keys were already copy-on-write);
this change just spreads the COW behaviour to a wider variety of SVs.

One important difference is that before 5.18.0, shared hash-key scalars
used to have the C<SvREADONLY> flag set; this is no longer the case.

This new behaviour can still be disabled by running F<Configure> with
B<-Accflags=-DPERL_NO_COW>.  This option will probably be removed in Perl
5.22.

=item *

C<PL_sawampersand> is now a constant.  The switch this variable provided
(to enable/disable the pre-match copy depending on whether C<$&> had been
seen) has been removed and replaced with copy-on-write, eliminating a few
bugs.

The previous behaviour can still be enabled by running F<Configure> with
B<-Accflags=-DPERL_SAWAMPERSAND>.

=item *

The functions C<my_swap>, C<my_htonl> and C<my_ntohl> have been removed.
It is unclear why these functions were ever marked as I<A>, part of the
API. XS code can't call them directly, as it can't rely on them being
compiled. Unsurprisingly, no code on CPAN references them.

=item *

The signature of the C<Perl_re_intuit_start()> regex function has changed;
the function pointer C<intuit> in the regex engine plugin structure
has also changed accordingly. A new parameter, C<strbeg> has been added;
this has the same meaning as the same-named parameter in
C<Perl_regexec_flags>. Previously intuit would try to guess the start of
the string from the passed SV (if any), and would sometimes get it wrong
(e.g. with an overloaded SV).

=item *

The signature of the C<Perl_regexec_flags()> regex function has
changed; the function pointer C<exec> in the regex engine plugin
structure has also changed to match.  The C<minend> parameter now has
type C<SSize_t> to better support 64-bit systems.

=item *

XS code may use various macros to change the case of a character or code
point (for example C<toLOWER_utf8()>).  Only a couple of these were
documented until now;
and now they should be used in preference to calling the underlying
functions.  See L<perlapi/Character case changing>.

=item *

The code dealt rather inconsistently with uids and gids. Some
places assumed that they could be safely stored in UVs, others
in IVs, others in ints. Four new macros are introduced:
SvUID(), sv_setuid(), SvGID(), and sv_setgid()

=item *

C<sv_pos_b2u_flags> has been added to the API.  It is similar to C<sv_pos_b2u>,
but supports long strings on 64-bit platforms.

=item *

C<PL_exit_flags> can now be used by perl embedders or other XS code to have
perl C<warn> or C<abort> on an attempted exit. [perl #52000]

=item *

Compiling with C<-Accflags=-PERL_BOOL_AS_CHAR> now allows C99 and C++
compilers to emulate the aliasing of C<bool> to C<char> that perl does for
C89 compilers.  [perl #120314]

=item *

The C<sv> argument in L<perlapi/sv_2pv_flags>, L<perlapi/sv_2iv_flags>,
L<perlapi/sv_2uv_flags>, and L<perlapi/sv_2nv_flags> and their older wrappers
sv_2pv, sv_2iv, sv_2uv, sv_2nv, is now non-NULL. Passing NULL now will crash.
When the non-NULL marker was introduced en masse in 5.9.3 the functions
were marked non-NULL, but since the creation of the SV API in 5.0 alpha 2, if
NULL was passed, the functions returned 0 or false-type values. The code that
supports C<sv> argument being non-NULL dates to 5.0 alpha 2 directly, and
indirectly to Perl 1.0 (pre 5.0 api). The lack of documentation that the
functions accepted a NULL C<sv> was corrected in 5.11.0 and between 5.11.0
and 5.19.5 the functions were marked NULLOK. As an optimization the NULLOK code
has now been removed, and the functions became non-NULL marked again, because
core getter-type macros never pass NULL to these functions and would crash
before ever passing NULL.

The only way a NULL C<sv> can be passed to sv_2*v* functions is if XS code
directly calls sv_2*v*. This is unlikely as XS code uses Sv*V* macros to get
the underlying value out of the SV. One possible situation which leads to
a NULL C<sv> being passed to sv_2*v* functions, is if XS code defines its own
getter type Sv*V* macros, which check for NULL B<before> dereferencing and
checking the SV's flags through public API Sv*OK* macros or directly using
private API C<SvFLAGS>, and if C<sv> is NULL, then calling the sv_2*v functions
with a NULL litteral or passing the C<sv> containing a NULL value.

=item *

newATTRSUB is now a macro

The public API newATTRSUB was previously a macro to the private
function Perl_newATTRSUB. Function Perl_newATTRSUB has been removed. newATTRSUB
is now macro to a different internal function.

=item *

Changes in warnings raised by C<utf8n_to_uvchr()>

This bottom level function decodes the first character of a UTF-8 string
into a code point.  It is accessible to C<XS> level code, but it's
discouraged from using it directly.  There are higher level functions
that call this that should be used instead, such as
L<perlapi/utf8_to_uvchr_buf>.  For completeness though, this documents
some changes to it.  Now, tests for malformations are done before any
tests for other potential issues.  One of those issues involves code
points so large that they have never appeared in any official standard
(the current standard has scaled back the highest acceptable code point
from earlier versions).  It is possible (though not done in CPAN) to
warn and/or forbid these code points, while accepting smaller code
points that are still above the legal Unicode maximum.  The warning
message for this now includes the code point if representable on the
machine.  Previously it always displayed raw bytes, which is what it
still does for non-representable code points.

=item *

Regexp engine changes that affect the pluggable regex engine interface

Many flags that used to be exposed via regexp.h and used to populate the
extflags member of struct regexp have been removed. These fields were
technically private to Perl's own regexp engine and should not have been
exposed there in the first place.

The affected flags are:

    RXf_NOSCAN
    RXf_CANY_SEEN
    RXf_GPOS_SEEN
    RXf_GPOS_FLOAT
    RXf_ANCH_BOL
    RXf_ANCH_MBOL
    RXf_ANCH_SBOL
    RXf_ANCH_GPOS

As well as the follow flag masks:

    RXf_ANCH_SINGLE
    RXf_ANCH

All have been renamed to PREGf_ equivalents and moved to regcomp.h.

The behavior previously achieved by setting one or more of the RXf_ANCH_
flags (via the RXf_ANCH mask) have now been replaced by a *single* flag bit
in extflags:

    RXf_IS_ANCHORED

pluggable regex engines which previously used to set these flags should
now set this flag ALONE.

=item *

The Perl core now consistently uses C<av_tindex()> ("the top index of an
array") as a more clearly-named synonym for C<av_len()>.

=item *

The obscure interpreter variable C<PL_timesbuf> is expected to be removed
early in the 5.21.x development series, so that Perl 5.22.0 will not provide
it to XS authors.  While the variable still exists in 5.20.0, we hope that
this advance warning of the deprecation will help anyone who is using that
variable.

=back

=head1 Selected Bug Fixes

=head2 Regular Expressions

=over 4

=item *

Fixed a small number of regexp constructions that could either fail to
match or crash perl when the string being matched against was
allocated above the 2GB line on 32-bit systems. [RT #118175]

=item *

Various memory leaks involving the parsing of the C<(?[...])> regular
expression construct have been fixed.

=item *

C<(?[...])> now allows interpolation of precompiled patterns consisting of
C<(?[...])> with bracketed character classes inside (C<$pat =
S<qr/(?[ [a] ])/;> S</(?[ $pat ])/>>).  Formerly, the brackets would
confuse the regular expression parser.

=item *

The "Quantifier unexpected on zero-length expression" warning message could
appear twice starting in Perl v5.10 for a regular expression also
containing alternations (e.g., "a|b") triggering the trie optimisation.

=item *

Perl v5.18 inadvertently introduced a bug whereby interpolating mixed up-
and down-graded UTF-8 strings in a regex could result in malformed UTF-8
in the pattern: specifically if a downgraded character in the range
C<\x80..\xff> followed a UTF-8 string, e.g.

    utf8::upgrade(  my $u = "\x{e5}");
    utf8::downgrade(my $d = "\x{e5}");
    /$u$d/

[RT #118297]

=item *

In regular expressions containing multiple code blocks, the values of
C<$1>, C<$2>, etc., set by nested regular expression calls would leak from
one block to the next.  Now these variables always refer to the outer
regular expression at the start of an embedded block [perl #117917].

=item *

C</$qr/p> was broken in Perl 5.18.0; the C</p> flag was ignored.  This has been
fixed. [perl #118213]

=item *

Starting in Perl 5.18.0, a construct like C</[#](?{})/x> would have its C<#>
incorrectly interpreted as a comment.  The code block would be skipped,
unparsed.  This has been corrected.

=item *

Starting in Perl 5.001, a regular expression like C</[#$a]/x> or C</[#]$a/x>
would have its C<#> incorrectly interpreted as a comment, so the variable would
not interpolate.  This has been corrected. [perl #45667]

=item *

Perl 5.18.0 inadvertently made dereferenced regular expressions
S<(C<${ qr// }>)> false as booleans.  This has been fixed.

=item *

The use of C<\G> in regular expressions, where it's not at the start of the
pattern, is now slightly less buggy (although it is still somewhat
problematic).

=item *

Where a regular expression included code blocks (C</(?{...})/>), and where the
use of constant overloading triggered a re-compilation of the code block, the
second compilation didn't see its outer lexical scope.  This was a regression
in Perl 5.18.0.

=item *

The string position set by C<pos> could shift if the string changed
representation internally to or from utf8.  This could happen, e.g., with
references to objects with string overloading.

=item *

Taking references to the return values of two C<pos> calls with the same
argument, and then assigning a reference to one and C<undef> to the other,
could result in assertion failures or memory leaks.

=item *

Elements of @- and @+ now update correctly when they refer to non-existent
captures.  Previously, a referenced element (C<$ref = \$-[1]>) could refer to
the wrong match after subsequent matches.

=item *

The code that parses regex backrefs (or ambiguous backref/octals) such as \123
did a simple atoi(), which could wrap round to negative values on long digit
strings and cause segmentation faults.  This has now been fixed.  [perl
#119505]

=item *

Assigning another typeglob to C<*^R> no longer makes the regular expression
engine crash.

=item *

The C<\N> regular expression escape, when used without the curly braces (to
mean C<[^\n]>), was ignoring a following C<*> if followed by whitespace
under /x.  It had been this way since C<\N> to mean C<[^\n]> was introduced
in 5.12.0.

=item *

C<s///>, C<tr///> and C<y///> now work when a wide character is used as the
delimiter.  [perl #120463]

=item *

Some cases of unterminated (?...) sequences in regular expressions (e.g.,
C</(?</>) have been fixed to produce the proper error message instead of
"panic: memory wrap".  Other cases (e.g., C</(?(/>) have yet to be fixed.

=item *

When a reference to a reference to an overloaded object was returned from
a regular expression C<(??{...})> code block, an incorrect implicit
dereference could take place if the inner reference had been returned by
a code block previously.

=item *

A tied variable returned from C<(??{...})> sees the inner values of match
variables (i.e., the $1 etc. from any matches inside the block) in its
FETCH method.  This was not the case if a reference to an overloaded object
was the last thing assigned to the tied variable.  Instead, the match
variables referred to the outer pattern during the FETCH call.

=item *

Fix unexpected tainting via regexp using locale. Previously, under certain
conditions, the use of character classes could cause tainting when it
shouldn't. Some character classes are locale-dependent, but before this
patch, sometimes tainting was happening even for character classes that
don't depend on the locale. [perl #120675]

=item *

Under certain conditions, Perl would throw an error if in an lookbehind
assertion in a regexp, the assertion referred to a named subpattern,
complaining the lookbehind was variable when it wasn't. This has been
fixed. [perl #120600], [perl #120618]. The current fix may be improved
on in the future.

=item *

C<$^R> wasn't available outside of the regular expression that
initialized it.  [perl #121070]

=item *

A large set of fixes and refactoring for re_intuit_start() was merged,
the highlights are:

=over

=item *

Fixed a panic when compiling the regular expression
C</\x{100}[xy]\x{100}{2}/>.

=item *

Fixed a performance regression when performing a global pattern match
against a UTF-8 string.  [perl #120692]

=item *

Fixed another performance issue where matching a regular expression
like C</ab.{1,2}x/> against a long UTF-8 string would unnecessarily
calculate byte offsets for a large portion of the string. [perl
#120692]

=back

=item *

Fixed an alignment error when compiling regular expressions when built
with GCC on HP-UX 64-bit.

=item *

On 64-bit platforms C<pos> can now be set to a value higher than 2**31-1.
[perl #72766]

=back

=head2 Perl 5 Debugger and -d

=over 4

=item *

The debugger's C<man> command been fixed. It was broken in the v5.18.0
release. The C<man> command is aliased to the names C<doc> and C<perldoc> -
all now work again.

=item *

C<@_> is now correctly visible in the debugger, fixing a regression
introduced in v5.18.0's debugger. [RT #118169]

=item *

Under copy-on-write builds (the default as of 5.20.0) C<< ${'_<-e'}[0] >>
no longer gets mangled.  This is the first line of input saved for the
debugger's use for one-liners [perl #118627].

=item *

On non-threaded builds, setting C<${"_E<lt>filename"}> to a reference or
typeglob no longer causes C<__FILE__> and some error messages to produce a
corrupt string, and no longer prevents C<#line> directives in string evals from
providing the source lines to the debugger.  Threaded builds were unaffected.

=item *

Starting with Perl 5.12, line numbers were off by one if the B<-d> switch was
used on the #! line.  Now they are correct.

=item *

C<*DB::DB = sub {} if 0> no longer stops Perl's debugging mode from finding
C<DB::DB> subs declared thereafter.

=item *

C<%{'_<...'}> hashes now set breakpoints on the corresponding C<@{'_<...'}>
rather than whichever array C<@DB::dbline> is aliased to.  [perl #119799]

=item *

Call set-magic when setting $DB::sub.  [perl #121255]

=item *

The debugger's "n" command now respects lvalue subroutines and steps over
them [perl #118839].

=back

=head2 Lexical Subroutines

=over 4

=item *

Lexical constants (C<my sub a() { 42 }>) no longer crash when inlined.

=item *

Parameter prototypes attached to lexical subroutines are now respected when
compiling sub calls without parentheses.  Previously, the prototypes were
honoured only for calls I<with> parentheses. [RT #116735]

=item *

Syntax errors in lexical subroutines in combination with calls to the same
subroutines no longer cause crashes at compile time.

=item *

Deep recursion warnings no longer crash lexical subroutines. [RT #118521]

=item *

The dtrace sub-entry probe now works with lexical subs, instead of
crashing [perl #118305].

=item *

Undefining an inlinable lexical subroutine (C<my sub foo() { 42 } undef
&foo>) would result in a crash if warnings were turned on.

=item *

An undefined lexical sub used as an inherited method no longer crashes.

=item *

The presence of a lexical sub named "CORE" no longer stops the CORE::
prefix from working.

=back

=head2 Everything Else

=over 4

=item *

The OP allocation code now returns correctly aligned memory in all cases
for C<struct pmop>. Previously it could return memory only aligned to a
4-byte boundary, which is not correct for an ithreads build with 64 bit IVs
on some 32 bit platforms. Notably, this caused the build to fail completely
on sparc GNU/Linux. [RT #118055]

=item *

Evaluating large hashes in scalar context is now much faster, as the number
of used chains in the hash is now cached for larger hashes. Smaller hashes
continue not to store it and calculate it when needed, as this saves one IV.
That would be 1 IV overhead for every object built from a hash. [RT #114576]

=item *

Perl v5.16 inadvertently introduced a bug whereby calls to XSUBs that were
not visible at compile time were treated as lvalues and could be assigned
to, even when the subroutine was not an lvalue sub.  This has been fixed.
[RT #117947]

=item *

In Perl v5.18.0 dualvars that had an empty string for the string part but a
non-zero number for the number part starting being treated as true.  In
previous versions they were treated as false, the string representation
taking precedeence.  The old behaviour has been restored. [RT #118159]

=item *

Since Perl v5.12, inlining of constants that override built-in keywords of
the same name had countermanded C<use subs>, causing subsequent mentions of
the constant to use the built-in keyword instead.  This has been fixed.

=item *

The warning produced by C<-l $handle> now applies to IO refs and globs, not
just to glob refs.  That warning is also now UTF8-clean. [RT #117595]

=item *

C<delete local $ENV{nonexistent_env_var}> no longer leaks memory.

=item *

C<sort> and C<require> followed by a keyword prefixed with C<CORE::> now
treat it as a keyword, and not as a subroutine or module name. [RT #24482]

=item *

Through certain conundrums, it is possible to cause the current package to
be freed.  Certain operators (C<bless>, C<reset>, C<open>, C<eval>) could
not cope and would crash.  They have been made more resilient. [RT #117941]

=item *

Aliasing filehandles through glob-to-glob assignment would not update
internal method caches properly if a package of the same name as the
filehandle existed, resulting in filehandle method calls going to the
package instead.  This has been fixed.

=item *

C<./Configure -de -Dusevendorprefix> didn't default. [RT #64126]

=item *

The C<Statement unlikely to be reached> warning was listed in
L<perldiag> as an C<exec>-category warning, but was enabled and disabled
by the C<syntax> category.  On the other hand, the C<exec> category
controlled its fatal-ness.  It is now entirely handled by the C<exec>
category.

=item *

The "Replacement list is longer that search list" warning for C<tr///> and
C<y///> no longer occurs in the presence of the C</c> flag. [RT #118047]

=item *

Stringification of NVs are not cached so that the lexical locale controls
stringification of the decimal point. [perl #108378] [perl #115800]

=item *

There have been several fixes related to Perl's handling of locales.  perl
#38193 was described above in L</Internal Changes>.
Also fixed is 
#118197, where the radix (decimal point) character had to be an ASCII
character (which doesn't work for some non-Western languages);
and #115808, in which C<POSIX::setlocale()> on failure returned an
C<undef> which didn't warn about not being defined even if those
warnings were enabled.

=item *

Compiling a C<split> operator whose third argument is a named constant
evaulating to 0 no longer causes the constant's value to change.

=item *

A named constant used as the second argument to C<index> no longer gets
coerced to a string if it is a reference, regular expression, dualvar, etc.

=item *

A named constant evaluating to the undefined value used as the second
argument to C<index> no longer produces "uninitialized" warnings at compile
time.  It will still produce them at run time.

=item *

When a scalar was returned from a subroutine in @INC, the referenced scalar
was magically converted into an IO thingy, possibly resulting in "Bizarre
copy" errors if that scalar continued to be used elsewhere.  Now Perl uses
an internal copy of the scalar instead.

=item *

Certain uses of the C<sort> operator are optimised to modify an array in
place, such as C<@a = sort @a>.  During the sorting, the array is made
read-only.  If a sort block should happen to die, then the array remained
read-only even outside the C<sort>.  This has been fixed.

=item *

C<$a> and C<$b> inside a sort block are aliased to the actual arguments to
C<sort>, so they can be modified through those two variables.  This did not
always work, e.g., for lvalue subs and C<$#ary>, and probably many other
operators.  It works now.

=item *

The arguments to C<sort> are now all in list context.  If the C<sort>
itself were called in void or scalar context, then I<some>, but not all, of
the arguments used to be in void or scalar context.

=item *

Subroutine prototypes with Unicode characters above U+00FF were getting
mangled during closure cloning.  This would happen with subroutines closing
over lexical variables declared outside, and with lexical subs.

=item *

C<UNIVERSAL::can> now treats its first argument the same way that method
calls do: Typeglobs and glob references with non-empty IO slots are treated
as handles, and strings are treated as filehandles, rather than packages,
if a handle with that name exists [perl #113932].

=item *

Method calls on typeglobs (e.g., C<< *ARGV->getline >>) used to stringify
the typeglob and then look it up again.  Combined with changes in Perl
5.18.0, this allowed C<< *foo->bar >> to call methods on the "foo" package
(like C<< foo->bar >>).  In some cases it could cause the method to be
called on the wrong handle.  Now a typeglob argument is treated as a
handle (just like C<< (\*foo)->bar >>), or, if its IO slot is empty, an
error is raised.

=item *

Assigning a vstring to a tied variable or to a subroutine argument aliased
to a nonexistent hash or array element now works, without flattening the
vstring into a regular string.

=item *

C<pos>, C<tie>, C<tied> and C<untie> did not work
properly on subroutine arguments aliased to nonexistent
hash and array elements [perl #77814, #27010].

=item *

The C<< => >> fat arrow operator can now quote built-in keywords even if it
occurs on the next line, making it consistent with how it treats other
barewords.

=item *

Autovivifying a subroutine stub via C<\&$glob> started causing crashes in Perl
5.18.0 if the $glob was merely a copy of a real glob, i.e., a scalar that had
had a glob assigned to it.  This has been fixed. [perl #119051]

=item *

Perl used to leak an implementation detail when it came to referencing the
return values of certain operators.  C<for ($a+$b) { warn \$_; warn \$_ }> used
to display two different memory addresses, because the C<\> operator was
copying the variable.  Under threaded builds, it would also happen for
constants (C<for(1) { ... }>).  This has been fixed. [perl #21979, #78194,
#89188, #109746, #114838, #115388]

=item *

The range operator C<..> was returning the same modifiable scalars with each
call, unless it was the only thing in a C<foreach> loop header.  This meant
that changes to values within the list returned would be visible the next time
the operator was executed. [perl #3105]

=item *

Constant folding and subroutine inlining no longer cause operations that would
normally return new modifiable scalars to return read-only values instead.

=item *

Closures of the form C<sub () { $some_variable }> are no longer inlined,
causing changes to the variable to be ignored by callers of the subroutine.
[perl #79908]

=item *

Return values of certain operators such as C<ref> would sometimes be shared
between recursive calls to the same subroutine, causing the inner call to
modify the value returned by C<ref> in the outer call.  This has been fixed.

=item *

C<__PACKAGE__> and constants returning a package name or hash key are now
consistently read-only.  In various previous Perl releases, they have become
mutable under certain circumstances.

=item *

Enabling "used once" warnings no longer causes crashes on stash circularities
created at compile time (C<*Foo::Bar::Foo:: = *Foo::>).

=item *

Undef constants used in hash keys (C<use constant u =E<gt> undef; $h{+u}>) no
longer produce "uninitialized" warnings at compile time.

=item *

Modifying a substitution target inside the substitution replacement no longer
causes crashes.

=item *

The first statement inside a string eval used to use the wrong pragma setting
sometimes during constant folding.  C<eval 'uc chr 0xe0'> would randomly choose
between Unicode, byte, and locale semantics.  This has been fixed.

=item *

The handling of return values of @INC filters (subroutines returned by
subroutines in @INC) has been fixed in various ways.  Previously tied variables
were mishandled, and setting $_ to a reference or typeglob could result in
crashes.

=item *

The C<SvPVbyte> XS function has been fixed to work with tied scalars returning
something other than a string.  It used to return utf8 in those cases where
C<SvPV> would.

=item *

Perl 5.18.0 inadvertently made C<--> and C<++> crash on dereferenced regular
expressions, and stopped C<++> from flattening vstrings.

=item *

C<bless> no longer dies with "Can't bless non-reference value" if its first
argument is a tied reference.

=item *

C<reset> with an argument no longer skips copy-on-write scalars, regular
expressions, typeglob copies, and vstrings.  Also, when encountering those or
read-only values, it no longer skips any array or hash with the same name.

=item *

C<reset> with an argument now skips scalars aliased to typeglobs
(C<for $z (*foo) { reset "z" }>).  Previously it would corrupt memory or crash.

=item *

C<ucfirst> and C<lcfirst> were not respecting the bytes pragma.  This was a
regression from Perl 5.12. [perl #117355]

=item *

Changes to C<UNIVERSAL::DESTROY> now update DESTROY caches in all classes,
instead of causing classes that have already had objects destroyed to continue
using the old sub.  This was a regression in Perl 5.18. [perl #114864]

=item *

All known false-positive occurrences of the deprecation warning "Useless use of
'\'; doesn't escape metacharacter '%c'", added in Perl 5.18.0, have been
removed. [perl #119101]

=item *

The value of $^E is now saved across signal handlers on Windows.  [perl #85104]

=item *

A lexical filehandle (as in C<open my $fh...>) is usually given a name based on
the current package and the name of the variable, e.g. "main::$fh".  Under
recursion, the filehandle was losing the "$fh" part of the name.  This has been
fixed.

=item *

Uninitialized values returned by XSUBs are no longer exempt from uninitialized
warnings.  [perl #118693]

=item *

C<elsif ("")> no longer erroneously produces a warning about void context.
[perl #118753]

=item *

Passing C<undef> to a subroutine now causes @_ to contain the same read-only
undefined scalar that C<undef> returns.  Furthermore, C<exists $_[0]> will now
return true if C<undef> was the first argument.  [perl #7508, #109726]

=item *

Passing a non-existent array element to a subroutine does not usually
autovivify it unless the subroutine modifies its argument.  This did not work
correctly with negative indices and with non-existent elements within the
array.  The element would be vivified immediately.  The delayed vivification
has been extended to work with those.  [perl #118691]

=item *

Assigning references or globs to the scalar returned by $#foo after the @foo
array has been freed no longer causes assertion failures on debugging builds
and memory leaks on regular builds.

=item *

On 64-bit platforms, large ranges like 1..1000000000000 no longer crash, but
eat up all your memory instead.  [perl #119161]

=item *

C<__DATA__> now puts the C<DATA> handle in the right package, even if the
current package has been renamed through glob assignment.

=item *

When C<die>, C<last>, C<next>, C<redo>, C<goto> and C<exit> unwind the scope,
it is possible for C<DESTROY> recursively to call a subroutine or format that
is currently being exited.  It that case, sometimes the lexical variables
inside the sub would start out having values from the outer call, instead of
being undefined as they should.  This has been fixed.  [perl #119311]

=item *

${^MPEN} is no longer treated as a synonym for ${^MATCH}.

=item *

Perl now tries a little harder to return the correct line number in
C<(caller)[2]>.  [perl #115768]

=item *

Line numbers inside multiline quote-like operators are now reported correctly.
[perl #3643]

=item *

C<#line> directives inside code embedded in quote-like operators are now
respected.

=item *

Line numbers are now correct inside the second here-doc when two here-doc
markers occur on the same line.

=item *

An optimization in Perl 5.18 made incorrect assumptions causing a bad
interaction with the L<Devel::CallParser> CPAN module.  If the module was
loaded then lexical variables declared in separate statements following a
C<my(...)> list might fail to be cleared on scope exit.

=item *

C<&xsub> and C<goto &xsub> calls now allow the called subroutine to autovivify
elements of @_.

=item *

C<&xsub> and C<goto &xsub> no longer crash if *_ has been undefined and has no
ARRAY entry (i.e. @_ does not exist).

=item *

C<&xsub> and C<goto &xsub> now work with tied @_.

=item *

Overlong identifiers no longer cause a buffer overflow (and a crash).  They
started doing so in Perl 5.18.

=item *

The warning "Scalar value @hash{foo} better written as $hash{foo}" now produces
far fewer false positives.  In particular, C<@hash{+function_returning_a_list}>
and C<@hash{ qw "foo bar baz" }> no longer warn.  The same applies to array
slices.  [perl #28380, #114024]

=item *

C<$! = EINVAL; waitpid(0, WNOHANG);> no longer goes into an internal infinite
loop.  [perl #85228]

=item *

A possible segmentation fault in filehandle duplication has been fixed.

=item *

A subroutine in @INC can return a reference to a scalar containing the initial
contents of the file.  However, that scalar was freed prematurely if not
referenced elsewhere, giving random results.

=item *

C<last> no longer returns values that the same statement has accumulated so
far, fixing amongst other things the long-standing bug that C<push @a, last>
would try to return the @a, copying it like a scalar in the process and
resulting in the error, "Bizarre copy of ARRAY in last."  [perl #3112]

=item *

In some cases, closing file handles opened to pipe to or from a process, which
had been duplicated into a standard handle, would call perl's internal waitpid
wrapper with a pid of zero.  With the fix for [perl #85228] this zero pid was
passed to C<waitpid>, possibly blocking the process.  This wait for process
zero no longer occurs.  [perl #119893]

=item *

C<select> used to ignore magic on the fourth (timeout) argument, leading to
effects such as C<select> blocking indefinitely rather than the expected sleep
time.  This has now been fixed.  [perl #120102]

=item *

The class name in C<for my class $foo> is now parsed correctly.  In the case of
the second character of the class name being followed by a digit (e.g. 'a1b')
this used to give the error "Missing $ on loop variable".  [perl #120112]

=item *

Perl 5.18.0 accidentally disallowed C<-bareword> under C<use strict> and
C<use integer>.  This has been fixed.  [perl #120288]

=item *

C<-a> at the start of a line (or a hyphen with any single letter that is
not a filetest operator) no longer produces an erroneous 'Use of "-a"
without parentheses is ambiguous' warning.  [perl #120288]

=item *

Lvalue context is now properly propagated into bare blocks and C<if> and
C<else> blocks in lvalue subroutines.  Previously, arrays and hashes would
sometimes incorrectly be flattened when returned in lvalue list context, or
"Bizarre copy" errors could occur.  [perl #119797]

=item *

Lvalue context is now propagated to the branches of C<||> and C<&&> (and
their alphabetic equivalents, C<or> and C<and>).  This means
C<foreach (pos $x || pos $y) {...}> now allows C<pos> to be modified
through $_.

=item *

C<stat> and C<readline> remember the last handle used; the former
for the special C<_> filehandle, the latter for C<${^LAST_FH}>.
C<eval "*foo if 0"> where *foo was the last handle passed to C<stat>
or C<readline> could cause that handle to be forgotten if the
handle were not opened yet.  This has been fixed.

=item *

Various cases of C<delete $::{a}>, C<delete $::{ENV}> etc. causing a crash
have been fixed.  [perl #54044]

=item *

Setting C<$!> to EACCESS before calling C<require> could affect
C<require>'s behaviour.  This has been fixed.

=item *

The "Can't use \1 to mean $1 in expression" warning message now only occurs
on the right-hand (replacement) part of a substitution.  Formerly it could
happen in code embedded in the left-hand side, or in any other quote-like
operator.

=item *

Blessing into a reference (C<bless $thisref, $thatref>) has long been
disallowed, but magical scalars for the second like C<$/> and those tied
were exempt.  They no longer are.  [perl #119809]

=item *

Blessing into a reference was accidentally allowed in 5.18 if the class
argument were a blessed reference with stale method caches (i.e., whose
class had had subs defined since the last method call).  They are
disallowed once more, as in 5.16.

=item *

C<< $x->{key} >> where $x was declared as C<my Class $x> no longer crashes
if a Class::FIELDS subroutine stub has been declared.

=item *

C<@$obj{'key'}> and C<${$obj}{key}> used to be exempt from compile-time
field checking ("No such class field"; see L<fields>) but no longer are.

=item *

A nonexistent array element with a large index passed to a subroutine that
ties the array and then tries to access the element no longer results in a
crash.

=item *

Declaring a subroutine stub named NEGATIVE_INDICES no longer makes negative
array indices crash when the current package is a tied array class.

=item *

Declaring a C<require>, C<glob>, or C<do> subroutine stub in the
CORE::GLOBAL:: package no longer makes compilation of calls to the
corresponding functions crash.

=item *

Aliasing CORE::GLOBAL:: functions to constants stopped working in Perl 5.10
but has now been fixed.

=item *

When C<`...`> or C<qx/.../> calls a C<readpipe> override, double-quotish
interpolation now happens, as is the case when there is no override.
Previously, the presence of an override would make these quote-like
operators act like C<q{}>, suppressing interpolation.  [perl #115330]

=item *

C<<<<`...`> here-docs (with backticks as the delimiters) now call
C<readpipe> overrides.  [perl #119827]

=item *

C<&CORE::exit()> and C<&CORE::die()> now respect L<vmsish> hints.

=item *

Undefining a glob that triggers a DESTROY method that undefines the same
glob is now safe.  It used to produce "Attempt to free unreferenced glob
pointer" warnings and leak memory.

=item *

If subroutine redefinition (C<eval 'sub foo{}'> or C<newXS> for XS code)
triggers a DESTROY method on the sub that is being redefined, and that
method assigns a subroutine to the same slot (C<*foo = sub {}>), C<$_[0]>
is no longer left pointing to a freed scalar.  Now DESTROY is delayed until
the new subroutine has been installed.

=item *

On Windows, perl no longer calls CloseHandle() on a socket handle.  This makes
debugging easier on Windows by removing certain irrelevant bad handle
exceptions.  It also fixes a race condition that made socket functions randomly
fail in a Perl process with multiple OS threads, and possible test failures in
F<dist/IO/t/cachepropagate-tcp.t>.  [perl #120091/118059]

=item *

Formats involving UTF-8 encoded strings, or strange vars like ties,
overloads, or stringified refs (and in recent
perls, pure NOK vars) would generally do the wrong thing in formats
when the var is treated as a string and repeatedly chopped, as in
C<< ^<<<~~ >> and similar. This has now been resolved.
[perl #33832/45325/113868/119847/119849/119851]

=item *

C<< semctl(..., SETVAL, ...) >> would set the semaphore to the top
32-bits of the supplied integer instead of the bottom 32-bits on
64-bit big-endian systems. [perl #120635]

=item *

C<< readdir() >> now only sets C<$!> on error.  C<$!> is no longer set
to C<EBADF> when then terminating C<undef> is read from the directory
unless the system call sets C<$!>. [perl #118651]

=item *

C<&CORE::glob> no longer causes an intermittent crash due to perl's stack
getting corrupted. [perl #119993]

=item *

C<open> with layers that load modules (e.g., "<:encoding(utf8)") no longer
runs the risk of crashing due to stack corruption.

=item *

Perl 5.18 broke autoloading via C<< ->SUPER::foo >> method calls by looking
up AUTOLOAD from the current package rather than the current package's
superclass.  This has been fixed. [perl #120694]

=item *

A longstanding bug causing C<do {} until CONSTANT>, where the constant
holds a true value, to read unallocated memory has been resolved.  This
would usually happen after a syntax error.  In past versions of Perl it has
crashed intermittently. [perl #72406]

=item *

Fix HP-UX C<$!> failure. HP-UX strerror() returns an empty string for an
unknown error code.  This caused an assertion to fail under DEBUGGING
builds.  Now instead, the returned string for C<"$!"> contains text
indicating the code is for an unknown error.

=item *

Individually-tied elements of @INC (as in C<tie $INC[0]...>) are now
handled correctly.  Formerly, whether a sub returned by such a tied element
would be treated as a sub depended on whether a FETCH had occurred
previously.

=item *

C<getc> on a byte-sized handle after the same C<getc> operator had been
used on a utf8 handle used to treat the bytes as utf8, resulting in erratic
behavior (e.g., malformed UTF-8 warnings).

=item *

An initial C<{> at the beginning of a format argument line was always
interpreted as the beginning of a block prior to v5.18.  In Perl v5.18, it
started being treated as an ambiguous token.  The parser would guess
whether it was supposed to be an anonymous hash constructor or a block
based on the contents.  Now the previous behavious has been restored.
[perl #119973]

=item *

In Perl v5.18 C<undef *_; goto &sub> and C<local *_; goto &sub> started
crashing.  This has been fixed. [perl #119949]

=item *

Backticks (C< `` > or C< qx// >) combined with multiple threads on
Win32 could result in output sent to stdout on one thread being
captured by backticks of an external command in another thread.

This could occur for pseudo-forked processes too, as Win32's
pseudo-fork is implemented in terms of threads.  [perl #77672]

=item *

C<< open $fh, ">+", undef >> no longer leaks memory when TMPDIR is set
but points to a directory a temporary file cannot be created in.  [perl
#120951]

=item *

C< for ( $h{k} || '' ) > no longer auto-vivifies C<$h{k}>.  [perl
#120374]

=item *

On Windows machines, Perl now emulates the POSIX use of the environment
for locale initialization.  Previously, the environment was ignored.
See L<perllocale/ENVIRONMENT>.

=item *

Fixed a crash when destroying a self-referencing GLOB.  [perl #121242]

=back

=head1 Known Problems

=over 4

=item *

L<IO::Socket> is known to fail tests on AIX 5.3.  There is
L<a patch|https://rt.perl.org/Ticket/Display.html?id=120835> in the request
tracker, #120835, which may be applied to future releases.

=item *

The following modules are known to have test failures with this version of
Perl.  Patches have been submitted, so there will hopefully be new releases
soon:

=over

=item *

L<Data::Structure::Util> version 0.15

=item *

L<HTML::StripScripts> version 1.05

=item *

L<List::Gather> version 0.08.

=back

=back

=head1 Obituary

Diana Rosa, 27, of Rio de Janeiro, went to her long rest on May 10,
2014, along with the plush camel she kept hanging on her computer screen
all the time. She was a passionate Perl hacker who loved the language and its
community, and who never missed a Rio.pm event. She was a true artist, an
enthusiast about writing code, singing arias and graffiting walls. We'll never
forget you.

=head1 Acknowledgements

Perl 5.20.0 represents approximately 12 months of development since Perl 5.18.0
and contains approximately 470,000 lines of changes across 2,900 files from 124
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 280,000 lines of changes to 1,800 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.20.0:

Aaron Crane, Abhijit Menon-Sen, Abigail, Abir Viqar, Alan Haggai Alavi, Alan
Hourihane, Alexander Voronov, Alexandr Ciornii, Andy Dougherty, Anno Siegel,
Aristotle Pagaltzis, Arthur Axel 'fREW' Schmidt, Brad Gilbert, Brendan Byrd,
Brian Childs, Brian Fraser, Brian Gottreu, Chris 'BinGOs' Williams, Christian
Millour, Colin Kuskie, Craig A. Berry, Dabrien 'Dabe' Murphy, Dagfinn Ilmari
Mannsåker, Daniel Dragan, Darin McBride, David Golden, David Leadbeater, David
Mitchell, David Nicol, David Steinbrunner, Dennis Kaarsemaker, Dominic
Hargreaves, Ed Avis, Eric Brine, Evan Zacks, Father Chrysostomos, Florian
Ragwitz, François Perrad, Gavin Shelley, Gideon Israel Dsouza, Gisle Aas,
Graham Knop, H.Merijn Brand, Hauke D, Heiko Eissfeldt, Hiroo Hayashi, Hojung
Youn, James E Keenan, Jarkko Hietaniemi, Jerry D. Hedden, Jess Robinson, Jesse
Luehrs, Johan Vromans, John Gardiner Myers, John Goodyear, John P. Linderman,
John Peacock, kafka, Kang-min Liu, Karen Etheridge, Karl Williamson, Keedi Kim,
Kent Fredric, kevin dawson, Kevin Falcone, Kevin Ryde, Leon Timmermans, Lukas
Mai, Marc Simpson, Marcel Grünauer, Marco Peereboom, Marcus Holland-Moritz,
Mark Jason Dominus, Martin McGrath, Matthew Horsfall, Max Maischein, Mike
Doherty, Moritz Lenz, Nathan Glenn, Nathan Trapuzzano, Neil Bowers, Neil
Williams, Nicholas Clark, Niels Thykier, Niko Tyni, Olivier Mengué, Owain G.
Ainsworth, Paul Green, Paul Johnson, Peter John Acklam, Peter Martini, Peter
Rabbitson, Petr Písař, Philip Boulain, Philip Guenther, Piotr Roszatycki,
Rafael Garcia-Suarez, Reini Urban, Reuben Thomas, Ricardo Signes, Ruslan
Zakirov, Sergey Alekseev, Shirakata Kentaro, Shlomi Fish, Slaven Rezic,
Smylers, Steffen Müller, Steve Hay, Sullivan Beck, Thomas Sibley, Tobias
Leich, Toby Inkster, Tokuhiro Matsuno, Tom Christiansen, Tom Hukins, Tony Cook,
Victor Efimov, Viktor Turskyi, Vladimir Timofeev, YAMASHINA Hio, Yves Orton,
Zefram, Zsbán Ambrus, Ævar Arnfjörð Bjarmason.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
